import asyncio
from vkbottle.bot import Message, Blueprint
from sqlighter import SQLighter
from ns import get_school, get_student
import traceback
from vkbottle import Keyboard, KeyboardButtonColor, Text, EMPTY_KEYBOARD
from vkbottle import BaseStateGroup
import logging
import ns

db = SQLighter('database.db')
bp = Blueprint('registration')




class NewaccountState(BaseStateGroup):
    INLOGIN = 10
    INSCHOOL = 11




@bp.on.message(lev='–ù–∞—á–∞—Ç—å')
@bp.on.message(payload={'cmd': 'start'})
async def registration(message: Message):
    await message.answer('üñä–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ç–µ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ –∫–ª–∞—Å—Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º(–ü—Ä–∏–º–µ—Ä: "https://sgo.edu-74.ru/ –ö–∏—Ä–∏–ª–ª~–ê—Ä–∑ qwerty123 8–±").\n–ï—Å–ª–∏ –≤ –ª–æ–≥–∏–Ω–µ –∏–ª–∏ –ø–∞—Ä–æ–ª–µ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã, —Ç–æ –∑–∞–º–µ–Ω–∏—Ç–µ –∏—Ö  –Ω–∞ ~')
    await bp.state_dispenser.set(message.peer_id, NewaccountState.INLOGIN)



@bp.on.message(state=NewaccountState.INLOGIN)
async def registration2(message: Message):
    logindata = message.text.split(' ')
    if logindata:
        try:
            schools = await get_school(logindata[0])
            await message.answer('üìã–í–≤–µ–¥–∏ ID —à–∫–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ(ID - –®–∫–æ–ª–∞)')
            text = ''
            for school in schools:
                text += f"\n{school['id']} - {school['name']}"
            if len(text) > 4096:
                for x in range(0, len(text), 4096):
                    await message.answer(text[x:x+4096])
                    await asyncio.sleep(1,5)
                await message.answer('‚úÖ–í—Å—ë!')
            else:
                await message.answer(text)
            await bp.state_dispenser.set(message.peer_id, NewaccountState.INSCHOOL, logindata=logindata)
        except Exception as e:
            print(traceback.print_exc())
            await message.answer(f'‚ùå–û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [kirillarz|—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É]')
    else:
        await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑')



@bp.on.private_message(state=NewaccountState.INSCHOOL)
async def registration3(message: Message):
    userInfo = await bp.api.users.get(message.from_id) # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ–Ω

    logindata = message.state_peer.payload["logindata"]

    for i in await get_school(logindata[0]):
        if i['id'] == int(message.text):
            school = i['name']
    
    login = ''
    for i in str(logindata[1]):
        if i == '~':
            login+=' '
        else:
            login+=i

    try:
        # –ï—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–¥:
        if db.get_account_isFirstLogin(userInfo[0].id) is None:
            db.add_user(userInfo[0].id, login, logindata[2], logindata[0], school, logindata[3])
            db.commit()
        logging.info(f'{message.peer_id}: User in database')
    except TypeError:
        logging.exception(f'{message.peer_id}: User not in database')
        db.add_user(userInfo[0].id, login, logindata[2], logindata[0], school, logindata[3])
        db.commit()

    else:
        db.edit_account_link(userInfo[0].id, logindata[0]) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: link')
        db.edit_account_school(userInfo[0].id, school) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: school')
        db.edit_account_login(userInfo[0].id, login) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: login')
        db.edit_account_password(userInfo[0].id, logindata[2]) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: password')
        db.edit_account_class(userInfo[0].id, logindata[3]) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: clas')
        db.commit()


    
    login = db.get_account_login(userInfo[0].id)
    password = db.get_account_password(userInfo[0].id)
    school = db.get_account_school(userInfo[0].id)
    link = db.get_account_link(userInfo[0].id)
    try:
        #–ê–≤—Ç–æ—Ä–µ–∑–∏—Ä—É–µ–º—Å—è –≤ –°–µ—Ç–µ–≤–æ–º –ì–æ—Ä–æ–¥–µ
        await ns.login(
            login,
            password,
            school,
            link
        )
        logging.info(f'{message.peer_id}: Login in NetSchool')
    except:
        logging.exception(f'{message.peer_id}: Exception occurred')
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!')
        return

    db.edit_account_correctData(userInfo[0].id, 1) # –î–µ–ª–∞–µ–º –ø–æ–º–µ—Ç–∫—É –≤ –±–¥, —á—Ç–æ —É —é–∑–µ—Ä–∞ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã
    db.commit()
    logging.info(f'{message.peer_id}: We make a note in the database that the user login and password are correct')

    keyboard = (
        Keyboard()
        .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'menu'}))
    )

    
    await bp.state_dispenser.delete(message.from_id)
    await message.answer(f'{userInfo[0].first_name}, —Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥ –ª–æ–≥–∏–Ω–æ–º: {login}', keyboard=keyboard)
    logging.info(f'{message.peer_id}: Start COMPLETED')







@bp.on.chat_message(state=NewaccountState.INSCHOOL)
async def registration3(message: Message):
    chat_id = message.chat_id

    logindata = message.state_peer.payload["logindata"]

    for i in await get_school(logindata[0]):
        if i['id'] == int(message.text):
            school = i['name']

    login = ''
    for i in str(logindata[1]):
        if i == '~':
            login+=' '
        else:
            login+=i

    try:
        # –ï—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–¥:
        if db.get_chat_id(chat_id) is None:
            db.add_chat(chat_id, login, logindata[2], logindata[0], school, logindata[3])
            db.commit()
        logging.info(f'{message.peer_id}: User in database')
    except TypeError:
        logging.exception(f'{message.peer_id}: User not in database')
        db.add_chat(chat_id, login, logindata[2], logindata[0], school, logindata[3])
        db.commit()

    else:
        db.edit_chat_link(chat_id, logindata[0]) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: link')
        db.edit_chat_school(chat_id, school) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: school')
        db.edit_chat_login(chat_id, login) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: login')
        db.edit_chat_password(chat_id, logindata[2]) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: password')
        db.edit_chat_class(chat_id, logindata[3]) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: clas')
        db.commit()


    
    login = db.get_chat_login(chat_id)
    password = db.get_chat_password(chat_id)
    school = db.get_chat_school(chat_id)
    link = db.get_chat_link(chat_id)
    try:
        #–ê–≤—Ç–æ—Ä–µ–∑–∏—Ä—É–µ–º—Å—è –≤ –°–µ—Ç–µ–≤–æ–º –ì–æ—Ä–æ–¥–µ
        await ns.login(
            login,
            password,
            school,
            link
        )
        logging.info(f'{message.peer_id}: Login in NetSchool')
    except:
        logging.exception(f'{message.peer_id}: Exception occurred')
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!')
        return

    logging.info(f'{message.peer_id}: We make a note in the database that the user login and password are correct')

    keyboard = (
        Keyboard()
        .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'menu'}))
    )

    await bp.state_dispenser.delete(message.peer_id)
    await message.answer(f'–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥ –ª–æ–≥–∏–Ω–æ–º: {login}', keyboard=keyboard)
    logging.info(f'{message.peer_id}: Start COMPLETED')

