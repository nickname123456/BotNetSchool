from database.methods.get import get_all_classes_by_school, get_chats_with_schedule_notification, get_schedule, get_student_by_telegram_id, get_students_with_schedule_notification
from database.methods.update import edit_schedule_photo, edit_student_telegram_id, edit_student_vk_id
from database.methods.create import create_schedule
from database.methods.delete import delete_chat


from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher
import aiogram

from vkbottle import Bot, VKAPIError

from .keyboard_schedule import keyboard_schedule
from tg_bot.utils import send_telegram_msg, send_telegram_bytes_photo
from tg_bot.keyboards.inline import kb_schedule_download, kb_back_to_schedule
from tg_bot.states import UpdScheduleStates

from vk_bot.utils import send_vk_msg

from settings import days_and_their_variations as days
from vk_bot.utils.send_vk_msg import send_vk_bytes_photo

from settings import vk_token, weekDays

import asyncio
import logging
import io


vk_bot = Bot(token=vk_token)

async def chat_start_schedule_download(callback: CallbackQuery):
    logging.info(f'{callback.message.chat.id}: I get schedule download request in chat')
    await callback.answer('‚ùå–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª/—Å!')

async def private_start_schedule_download(callback: CallbackQuery):
    logging.info(f'{callback.message.chat.id}: I get schedule download request in private')
    await UpdScheduleStates.INPHOTO.set()
    await callback.message.edit_text('‚ùì–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?')
    await callback.message.edit_reply_markup(reply_markup=kb_schedule_download)
    logging.info(f'{callback.message.chat.id}: I send schedule download question about day')

async def photo_schedule_download(callback: CallbackQuery, state: FSMContext):
    logging.info(f'{callback.message.chat.id}: I get schedule download day')
    day = callback.data.split('_')[2] # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    day = [i for i in days if day in days[i]][0] # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if day in weekDays.values(): # –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        await state.update_data(day=day) # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    else: # –ï—Å–ª–∏ –Ω–µ—Ç
        logging.info(f'{callback.message.chat.id}: I get schedule download day, but it is not a day')
        await callback.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑') # –û—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ –Ω–µ –Ω–∞—à–µ–ª –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        return
    await UpdScheduleStates.next() # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await callback.message.edit_text('üìÖ–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
    await callback.message.edit_reply_markup(reply_markup=kb_back_to_schedule)
    logging.info(f'{callback.message.chat.id}: I send schedule download question about photo')

async def class_schedule_download(message: Message, state: FSMContext):
    logging.info(f'{message.chat.id}:I get schedule download photo')
    photo: io.BytesIO = await message.bot.download_file_by_id(message.photo[-1].file_id) # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–π—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    photo = photo.read()
    logging.info(f'{message.chat.id}: I save photo in bytes')

    await state.update_data(photo=photo) # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await UpdScheduleStates.next() # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton('–≠—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —à–∫–æ–ª—ã', callback_data='ItsSheduleForAllSchool')).add(InlineKeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥', callback_data='keyboard_schedule'))
    await message.answer('‚ùì–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª–∞—Å—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', reply_markup=kb)
    logging.info(f'{message.chat.id}: I send schedule download question about class')

async def finish_schedule_download(message: Message, state: FSMContext):
    if isinstance(message, CallbackQuery): # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª CallbackQuery
        logging.info(f'{message.message.chat.id}: It is schedule for all school')
        message = message.message
        clas = 'all'
    else:
        clas = message.text.lower()
    logging.info(f'{message.chat.id}: I get schedule download class')
    all_data = await state.get_data() # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    day = all_data['day']
    photo_as_bytes = all_data['photo']
    student = get_student_by_telegram_id(message.chat.id) # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    school = student.school
    if clas == 'all': # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —à–∫–æ–ª—ã
        for i in get_all_classes_by_school(school): # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –≤ —ç—Ç–æ–π —à–∫–æ–ª–µ
            if get_schedule(school, i[0], day) is None: # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                create_schedule(school, i[0], day, photo_as_bytes) # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                logging.info(f'{message.chat.id}: I create schedule for {i[0]} class')
            else:
                edit_schedule_photo(school, i[0], day, photo_as_bytes) # –ò–Ω–∞—á–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                logging.info(f'{message.chat.id}: I edit schedule for {i[0]} class')
    else: # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        if get_schedule(school, clas, day) is None: # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            create_schedule(school, clas, day, photo_as_bytes) # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            logging.info(f'{message.chat.id}: I create schedule for {clas} class')
        else:
            edit_schedule_photo(school, clas, day, photo_as_bytes) # –ò–Ω–∞—á–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            logging.info(f'{message.chat.id}: I edit schedule for {clas} class')
    
    await send_telegram_bytes_photo(bot=message.bot, chat_id=message.chat.id, photo=photo_as_bytes, caption=f'‚úÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
    logging.info(f'{message.chat.id}: I send schedule download success message')
    await state.finish() # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É —Å FSM

    await keyboard_schedule(message) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º

    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    users_with_notification = get_students_with_schedule_notification()
    chats_with_notification = get_chats_with_schedule_notification()
    for i in users_with_notification: # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if i.school == school: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —ç—Ç–æ–π —à–∫–æ–ª—ã
            if i.clas == clas or clas == 'all': # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —à–∫–æ–ª—ã
                if i.vk_id: # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –í–ö
                    try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –í–ö
                        await send_vk_bytes_photo(bot=vk_bot, photo=photo_as_bytes, user_id=i.vk_id, caption=f'üîÑ–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}!')
                        logging.info(f'I send schedule to vk user. Id: {i.vk_id}')
                    except VKAPIError: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                        logging.info(f'I can not send schedule to vk user. Id: {i.vk_id}')
                        if i.vk_id and i.telegram_id: # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –í–ö –∏ –¢–µ–ª–µ–≥—Ä–∞–º
                            edit_student_vk_id(telegram_id=i.telegram_id, new_vk_id=None) # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –í–ö
                            await send_telegram_msg(bot=message.bot, chat_id=i.telegram_id, text='‚ùå–Ø –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –í–ö, —Ç.–∫. –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –º–µ–Ω—è. –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ')
                if i.telegram_id:
                    try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º
                        await send_telegram_bytes_photo(bot=message.bot, chat_id=i.telegram_id, caption=f'üîÑ–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}!', photo=photo_as_bytes)
                        logging.info(f'I send schedule to telegram user. Id: {i.telegram_id}')
                    except aiogram.utils.exceptions.BotBlocked: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                        logging.info(f'I can not send schedule to telegram user. Id: {i.telegram_id}')
                        if i.vk_id and i.telegram_id: # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –í–ö –∏ –¢–µ–ª–µ–≥—Ä–∞–º
                            edit_student_telegram_id(vk_id=i.vk_id, new_telegram_id=None) # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –¢–µ–ª–µ–≥—Ä–∞–º
                            await send_vk_msg(bot=vk_bot, user_id=i.vk_id, message='‚ùå–Ø –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ, —Ç.–∫. –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –º–µ–Ω—è. –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –í–ö')
                await asyncio.sleep(1)
    
    for i in chats_with_notification: # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —á–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if i.school == school: # –ï—Å–ª–∏ —á–∞—Ç –∏–∑ —ç—Ç–æ–π —à–∫–æ–ª—ã
            if i.clas == clas or clas == 'all': # –ï—Å–ª–∏ —á–∞—Ç –∏–∑ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —à–∫–æ–ª—ã
                if i.vk_id:
                    try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –í–ö
                        await send_vk_bytes_photo(bot=vk_bot, photo=photo_as_bytes, chat_id=i.vk_id, caption=f'üîÑ–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}!')
                        logging.info(f'I send schedule to vk chat. Id: {i.vk_id}')
                    except VKAPIError:  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                        delete_chat(vk_id=i.vk_id) # –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        logging.info(f'I can not send schedule to vk chat and delete it. Id: {i.vk_id}')
                if i.telegram_id: # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –í–ö –∏ –¢–µ–ª–µ–≥—Ä–∞–º
                    try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º
                        await send_telegram_bytes_photo(bot=message.bot, chat_id=i.telegram_id, caption=f'üîÑ–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}!', photo=photo_as_bytes)
                        logging.info(f'I send schedule to telegram chat. Id: {i.telegram_id}')
                    except aiogram.utils.exceptions.BotKicked: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                        delete_chat(telegram_id=i.telegram_id) # –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        logging.info(f'I can not send schedule to telegram chat and delete it. Id: {i.telegram_id}')
                await asyncio.sleep(1)
    logging.info(f'{message.chat.id}: I done mailing in schedule_download')







def register_schedule_download(dp: Dispatcher):
    dp.register_callback_query_handler(chat_start_schedule_download, lambda callback: callback.data == 'schedule_download', state='*', chat_type='group')
    dp.register_callback_query_handler(private_start_schedule_download, lambda callback: callback.data == 'schedule_download', state='*', chat_type='private')

    dp.register_callback_query_handler(photo_schedule_download, lambda callback: callback.data.startswith('update_schedule_'), state=UpdScheduleStates.INPHOTO)

    dp.register_message_handler(class_schedule_download, state=UpdScheduleStates.INCLASS, content_types=['photo'])

    dp.register_message_handler(finish_schedule_download, state=UpdScheduleStates.END, content_types=['text'])
    dp.register_callback_query_handler(finish_schedule_download, lambda callback: callback.data == 'ItsSheduleForAllSchool', state=UpdScheduleStates.END)