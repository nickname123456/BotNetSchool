from database.methods.get import get_all_chats, get_all_homeworks, get_all_schedules, get_all_students, get_student_by_telegram_id, get_students_with_admin

from aiogram.types import Message, CallbackQuery
from aiogram import Dispatcher

from tg_bot.keyboards import admin_kb
# from settings import reduction_for_search

import logging


async def admin_panel(message: Message, callback=None):
    if isinstance(message, CallbackQuery):
        callback = message
        message = callback.message
    user_id = message.chat.id
    logging.info(f'{user_id}: I get admin panel')

    student = get_student_by_telegram_id(user_id)
    if not student.isAdmin:
        await message.answer('‚ùå–£ —Ç–µ–±—è –Ω–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤!')
        return

    await message.answer("üëπ–¢—ã –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.", reply_markup=admin_kb)

    logging.info(f'{user_id}: I sent admin panel')


async def admin_stats(callback: CallbackQuery):
    logging.info(f'{callback.message.chat.id}: I get admin stats')
    message = callback.message
    user_id = message.chat.id

    student = get_student_by_telegram_id(user_id)
    if not student.isAdmin:
        await message.edit_text('‚ùå–£ —Ç–µ–±—è –Ω–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤!')
        return



    admins = get_students_with_admin()  # –í—Å–µ –∞–¥–º–∏–Ω—ã
    num_admins = len(admins)  # –ö–æ–ª-–≤–æ –∞–¥–º–∏–Ω–æ–≤
    admins_vk_id = [admin.vk_id for admin in admins]  # ID—à–Ω–∏–∫–∏ –∞–¥–º–∏–Ω–æ–≤
    admins_tg_id = [admin.telegram_id for admin in admins]  # ID—à–Ω–∏–∫–∏ –∞–¥–º–∏–Ω–æ–≤

    all_users = get_all_students()
    all_chats = get_all_chats()
    num_users = len(all_users)  # –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    num_chats = len(all_chats)  # –ö–æ–ª-–≤–æ —á–∞—Ç–æ–≤

    num_schedule = len(get_all_schedules())  # –ö–æ–ª-–≤–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
    num_homework = len(get_all_homeworks())  # –ö–æ–ª-–≤–æ –¥–æ–º–∞—à–µ–∫

    regions = []
    schools = []
    num_users_from_chel = 0
    num_users_from_47 = 0
    for user in all_users:
        if user.school not in schools:
            schools.append(user.school)

        if user.link not in regions:
            regions.append(user.link)

        if user.link.startswith('https://sgo.edu-74.ru'):
            num_users_from_chel += 1

        if user.school == '–ú–ê–û–£ "–°–û–® ‚Ññ 47 –≥. –ß–µ–ª—è–±–∏–Ω—Å–∫–∞"':
            num_users_from_47 += 1

    num_regions = len(regions)  # –ö–æ–ª-–≤–æ —Ä–µ–≥–∏–æ–Ω–æ–≤
    num_schools = len(schools)  # –ö–æ–ª-–≤–æ —à–∫–æ–ª

    await message.edit_text(f"""
ü§°–ß–∏—Å–ª–æ –∞–¥–º–∏–Ω–æ–≤: {num_admins}
ID'—à–Ω–∏–∫–∏ –∞–¥–º–∏–Ω–æ–≤ –≤ –¢–ì: {admins_tg_id}
ID'—à–Ω–∏–∫–∏ –∞–¥–º–∏–Ω–æ–≤ –≤ –í–ö: {admins_vk_id}
====================
ü¶£–ß–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {num_users}
üë®‚Äçüë®‚Äçüë¶‚Äçüë¶–ß–∏—Å–ª–æ —á–∞—Ç–æ–≤: {num_chats}
====================
üìÖ–ß–∏—Å–ª–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {num_schedule}
üìö–ß–∏—Å–ª–æ –¥–æ–º–∞—à–µ–∫: {num_homework}
====================
üåç–ß–∏—Å–ª–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {num_regions}
üè†–ß–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ß–µ–ª—è–±–∏–Ω—Å–∫–∞: {num_users_from_chel}
====================
üè´–ß–∏—Å–ª–æ —à–∫–æ–ª: {num_schools}
üë®‚Äçüè´–ß–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–≤–æ–µ–π —à–∫: {num_users_from_47}
""", reply_markup=admin_kb)

    logging.info(f'{user_id}: I sent admin stats')




# async def admin_search_banner(message: Message, callback=None):
#     if isinstance(message, CallbackQuery):
#         callback = message
#         message = callback.message
#     user_id = message.chat.id
#     logging.info(f'{user_id}: I get admin search')

#     student = get_student_by_telegram_id(user_id)
#     if not student.isAdmin:
#         await message.answer('‚ùå–£ —Ç–µ–±—è –Ω–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤!')
#         return

#     if message.from_user.id == user_id and message.text.startswith('/search') and message.text != '/search':
#         await admin_search(message)
#     else:
#         await message.answer("üí°–ò—Å–ø–æ–ª—å–∑—É–π /search {–û–ë–™–ï–ö–¢} {—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ=–∑–Ω–∞—á–µ–Ω–∏–µ}", reply_markup=admin_kb)
#         await message.answer("""
# –°–æ–∫—Ä–∞—â–µ–Ω–∏—è:
# –Æ–ó–ï–† - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
# –ß–ê–¢ - —á–∞—Ç
# –î–ó - –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
# –†–ê–°–ü - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

# –ò–î - id
# –ê–î–ú - isAdmin
# –í–ö–ò–î - vk_id
# –¢–ì–ò–î - telegram_id
# –õ–û–ì–ò–ù - login
# –ü–ê–°–° - password
# –õ–ò–ù–ö - link
# –°–ö–£–õ - school
# –ö–õ–ê–°–° - class
# –°–¢–£–î–ò–î - student_id
# –ú–ê–†–ö–ù–û–¢–ò–§ - mark_notification
# –•–û–ú–ù–û–¢–ò–§ - homework_notification
# –û–õ–î–ú–ê–†–ö- old_mark
# –û–õ–î–ê–ù–û–ù–¶ - old_announcements
# –ö–û–†–õ–ï–°–°–û–ù - correction_lesson
# –ö–û–†–ú–ê–†–ö - correction_mark
# –ö–û–ù–ù–ï–ö–¢ - connect_code
# """)
#     logging.info(f'{user_id}: I sent admin search')
    
# async def admin_search (message: Message):
#     user_id = message.chat.id
#     logging.info(f'{user_id}: I get admin search')
#     student = get_student_by_telegram_id(user_id)
#     if not student.isAdmin:
#         await message.answer('‚ùå–£ —Ç–µ–±—è –Ω–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤!')
#         return
    
#     args = message.text.split(' ')[1:]
#     obj = reduction_for_search[args[0]]
#     arg, value = args[1].split('=')
#     arg = reduction_for_search[arg]


#     await message.answer(f'üîé–ò—â—É {args}')
    
    




def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(admin_panel, content_types=['text'], text=[
                                "–∞–¥–º–∏–Ω", '–∞–¥–º–∏–Ω–∫–∞', 'flvby', 'admin', "/–∞–¥–º–∏–Ω", '/–∞–¥–º–∏–Ω–∫–∞', '/flvby', '/admin'], state='*', chat_type='private')
    dp.register_callback_query_handler(
        admin_panel, lambda c: c.data == 'admin_panel', state='*', chat_type='private')

    dp.register_callback_query_handler(admin_stats, lambda c: c.data == 'admin_stats', state='*', chat_type='private')

    # dp.register_message_handler(admin_search_banner, content_types=['text'], text=['/search'], state='*', chat_type='private')
    # dp.register_message_handler(admin_search_banner, commands=['search'], state='*', chat_type='private')
    # dp.register_callback_query_handler(admin_search_banner, lambda c: c.data == 'admin_search', state='*', chat_type='private')