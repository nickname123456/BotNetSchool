from database.methods.get import get_chats_with_homework_notification, get_homework, get_student_by_telegram_id, get_students_with_homework_notification
from database.methods.update import edit_homework, edit_homework_upd_date, edit_student_vk_id, edit_student_telegram_id
from database.methods.create import create_homework
from database.methods.delete import delete_chat
from netschoolapi import netschoolapi

from tg_bot.handlers.homework.keyboard_homework import private_keyboard_homework
from tg_bot.keyboards.inline import get_update_homework_kb
from tg_bot.states import HomeworkStates
from vk_bot.utils import send_vk_msg
from settings import vk_token
import ns

from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher
import aiogram

from vkbottle import VKAPIError
from vkbottle import Bot

from datetime import datetime
import asyncio
import logging


vk_bot = Bot(token=vk_token)

async def private_keyboard_update_homework(message: Message, callback=None):
    if isinstance(message, CallbackQuery):
        callback = message
        message = message.message
    logging.info(f'{message.chat.id}: get keyboard update homework')
    userId = message.chat.id
    student = get_student_by_telegram_id(userId)

    await HomeworkStates.INLESSON.set()

    try:
        kb = get_update_homework_kb(await ns.getSubjectsId(
            student.login,
            student.password,
            student.school,
            student.link,
            student.studentId))
        logging.info(f'{message.chat.id}: get keyboard')
    except netschoolapi.errors.AuthError:
        logging.info(f'{message.chat.id}: wrong login or password')
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!')
        return
    await message.edit_text('ü§î–ù–∞ –∫–∞–∫–æ–π —É—Ä–æ–∫ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∑?')
    await message.edit_reply_markup(reply_markup=kb)
    logging.info(f'{message.chat.id}: send keyboard')


async def chat_keyboard_update_homework(message: Message):
    await message.answer('‚ùå–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª/—Å!')


async def get_new_homework(callback_query: CallbackQuery, state: FSMContext):
    logging.info(f'{callback_query.message.chat.id}: get lesson for upadte homework')
    await state.update_data(lesson=callback_query.data[16:])
    await HomeworkStates.next()

    await callback_query.message.answer('üìù–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ')
    logging.info(f'{callback_query.message.chat.id}: send question about new homework') 


async def private_edit_hamework(message: Message, state: FSMContext):
    logging.info(f'{message.chat.id}: get new homework')
    userId = message.chat.id
    student = get_student_by_telegram_id(userId)
    data = await state.get_data()
    lessonId = data['lesson']
    homework = message.text
    upd_date = f'{datetime.now().hour}:{datetime.now().minute} {datetime.now().day}.{datetime.now().month}.{datetime.now().year}'
    await state.finish()

    try:
        lessons = await ns.getSubjectsId(
            student.login,
            student.password,
            student.school,
            student.link,
            student.studentId
        )
        lesson = [lesson for lesson in lessons if lessons[lesson] == lessonId][0]

        if get_homework(lesson, student.school, student.clas):
            edit_homework(lesson, student.school, student.clas, homework)
            edit_homework_upd_date(lesson, student.school, student.clas, upd_date)
        else:
            create_homework(lesson, student.school, student.clas, homework, upd_date)
        
        await message.answer('‚úÖ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!')
        await private_keyboard_homework(message)
        logging.info(f'{message.chat.id}: send message about success update homework')

    except TypeError:
        logging.info(f'{message.chat.id}: user not found')
        await message.answer('‚ùå–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! \nü§î–ù–∞–ø–∏—à–∏—Ç–µ "–ù–∞—á–∞—Ç—å"')
    except Exception as e:
        logging.error(f'{message.chat.id}: error: {e}')
        await message.answer(f'‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùå\n{e} \n‚ùå–°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É‚ùå')
    
    logging.info(f'{message.chat.id}: start mailing for users')
    users_with_notification = get_students_with_homework_notification()
    chats_with_notification = get_chats_with_homework_notification()
    for i in users_with_notification:
        telegram_id = i.telegram_id
        vk_id = i.vk_id
        if i.school == student.school: # –ï—Å–ª–∏ —à–∫–æ–ª–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if i.clas == student.clas: # –ï—Å–ª–∏ –∫–ª–∞—Å—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                if vk_id: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤–∫
                    try: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await send_vk_msg(bot=vk_bot, user_id=vk_id, message=f'üîÑ–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ {lesson}!\nüÜô–ë—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {upd_date}\nüí¨–ó–∞–¥–∞–Ω–∏–µ: {homework}')
                        logging.info(f'{vk_id}: send vk notification')
                    except VKAPIError: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                        logging.info(f'{vk_id}: vk notification error')
                        if vk_id and telegram_id: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤–∫ –∏ —Ç–µ–ª–µ–≥—Ä–∞–º
                            await message.bot.send_message(telegram_id, '‚ùå–Ø –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –í–ö, —Ç.–∫. –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –º–µ–Ω—è. –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ')
                            edit_student_vk_id(telegram_id=telegram_id, new_vk_id=None) # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤–∫
                            logging.info(f'{telegram_id}: delete vk account')
                if telegram_id: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Ç–µ–ª–µ–≥—Ä–∞–º
                    try: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await message.bot.send_message(telegram_id, f'üîÑ–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ {lesson}!\nüÜô–ë—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {upd_date}\nüí¨–ó–∞–¥–∞–Ω–∏–µ: {homework}')
                        logging.info(f'{telegram_id}: send telegram notification')
                    except aiogram.exceptions.BotBlocked: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                        logging.info(f'{telegram_id}: telegram notification error')
                        if vk_id and telegram_id: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤–∫ –∏ —Ç–µ–ª–µ–≥—Ä–∞–º
                            await send_vk_msg(vk_bot, vk_id, f'‚ùå–Ø –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ, —Ç.–∫. –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –º–µ–Ω—è. –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –í–ö')
                            edit_student_telegram_id(vk_id=vk_id, new_telegram_id=None) # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç —Ç–µ–ª–µ–≥—Ä–∞–º
                            logging.info(f'{vk_id}: delete telegram account')
                await asyncio.sleep(1) # –û—Ç–¥—ã—Ö–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å

    logging.info(f'{message.chat.id}: start mailing for chats')
    for i in chats_with_notification:
        telegram_id = i.telegram_id
        vk_id = i.vk_id
        if i.school == student.school:  # –ï—Å–ª–∏ —à–∫–æ–ª–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if i.clas == student.clas: # –ï—Å–ª–∏ –∫–ª–∞—Å—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                if vk_id: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤–∫
                    try: # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await send_vk_msg(bot=vk_bot, chat_id=vk_id, message=f'üîÑ–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ {lesson}!\nüÜô–ë—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {upd_date}\nüí¨–ó–∞–¥–∞–Ω–∏–µ: {homework}')
                        logging.info(f'{telegram_id}: send vk notification')
                    except VKAPIError: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                        logging.info(f'{telegram_id}: vk notification error')
                        delete_chat(vk_id=vk_id) # –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        logging.info(f'{telegram_id}: delete chat from database')
                if telegram_id: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Ç–µ–ª–µ–≥—Ä–∞–º
                    try: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await message.bot.send_message(telegram_id, f'üîÑ–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ {lesson}!\nüÜô–ë—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {upd_date}\nüí¨–ó–∞–¥–∞–Ω–∏–µ: {homework}')
                        logging.info(f'{telegram_id}: send telegram notification')
                    except aiogram.exceptions.BotKicked: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                        logging.info(f'{telegram_id}: telegram notification error')
                        delete_chat(telegram_id=telegram_id) # –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        logging.info(f'{telegram_id}: delete chat from database')
                await asyncio.sleep(1) # –û—Ç–¥—ã—Ö–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
    logging.info(f'{message.chat.id}: end mailing')



def register_update_homework_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(chat_keyboard_update_homework, lambda c: c.data and c.data == 'update_homework', state='*', chat_type='group')
    
    dp.register_callback_query_handler(private_keyboard_update_homework, lambda c: c.data and c.data == 'update_homework', state='*', chat_type='private')
    dp.register_callback_query_handler(get_new_homework, lambda c: c.data and c.data.startswith('update_homework_'), state=HomeworkStates.INLESSON)
    dp.register_message_handler(private_edit_hamework, state=HomeworkStates.INHOMEWORK)