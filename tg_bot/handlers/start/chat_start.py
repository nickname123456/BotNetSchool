from database.methods.delete import delete_chat
from database.methods.update import edit_chat_clas, edit_chat_link, edit_chat_login, edit_chat_password, edit_chat_school, edit_chat_studentId, edit_chat_telegram_id
from database.methods.get import get_all_chats, get_all_students, get_chat_by_telegram_id
from database.methods.create import create_chat

from tg_bot.states import StartStates, ConnectCodeStates
import ns

from aiogram.types import Message, InlineKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher

import logging



async def registration(message: Message):
    bot = message.bot
    chat_id = message.chat.id
    kb = InlineKeyboardMarkup().add(KeyboardButton('‚úî–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –õ–∏—á–Ω—ã—Ö –°–æ–æ–±—â–µ–Ω–∏–π', callback_data='import_data_from_private'))

    await bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!üëãüèª –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–≤–µ—Ç—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å https://vk.com/@botnetschool-spravka-po-ispolzovaniu-bota')
    await bot.send_message(chat_id, '–ü—Ä–æ–¥–æ–ª–∂–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (https://vk.com/@botnetschool-politika-v-otnoshenii-obrabotki-personalnyh-dannyh)')
    await bot.send_message(chat_id, 'üîó–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ç–µ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (–ü—Ä–∏–º–µ—Ä: "https://sgo.edu-74.ru/"). \n–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å "–°–µ—Ç–µ–≤–æ–π –ì–æ—Ä–æ–¥ –≤ –í–ö", —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=kb)

    await StartStates.INLINK.set()


async def registration_inLink(message: Message, state: FSMContext):
    bot = message.bot
    chat_id = message.chat.id
    link = message.text

    try:
        countries = await ns.get_countries(link)
    except:
        await bot.send_message(chat_id, '‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑')
        return

    keyboard = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in countries:
        keyboard.add(KeyboardButton(i['name'], callback_data=f'start_countries_{i["id"]}'))
    keyboard.add(KeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data=f'start_back'))
    
    await state.update_data(link=link)
    await StartStates.next()
    await bot.send_message(chat_id, 'üåç–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –∂–∏–≤–µ—Ç–µ?', reply_markup=keyboard)
    
    

async def registration_inCountries(callback_query: CallbackQuery, state: FSMContext):
    message = callback_query.message

    countryId = callback_query.data[16:]

    await state.update_data(countryId=countryId)
    await StartStates.next()

    provinces = await ns.get_provinces((await state.get_data())['link'], countryId)
    keyboard = InlineKeyboardMarkup(row_width=2)
    for i in provinces:
        keyboard.insert(KeyboardButton(i['name'], callback_data=f'start_provinces_{i["id"]}'))
    keyboard.add(KeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data=f'start_back'))

    await message.edit_text('üìã–í–≤–µ–¥–∏—Ç–µ ID —Ä–∞–π–æ–Ω–∞/–æ–±–ª–∞—Å—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ')
    await message.edit_reply_markup(keyboard)



async def registration_inProvinces(callback_query: CallbackQuery, state: FSMContext):
    message = callback_query.message

    link = (await state.get_data())['link']
    countryId = (await state.get_data())['countryId']
    provincesId = callback_query.data[16:]

    await state.update_data(provincesId=provincesId)
    await StartStates.next()

    provinces = await ns.get_cities(link, countryId, provincesId)
    keyboard = InlineKeyboardMarkup(row_width=2)
    for i in provinces:
        keyboard.insert(KeyboardButton(i['name'], callback_data=f'start_cities_{i["id"]}'))
    keyboard.add(KeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data=f'start_back'))

    await message.edit_text('üìã–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?')
    await message.edit_reply_markup(keyboard)



async def registration_inCities(callback_query: CallbackQuery, state: FSMContext):
    message = callback_query.message
    bot = message.bot
    chat_id = message.chat.id

    link = (await state.get_data())['link']
    countryId = (await state.get_data())['countryId']
    provincesId = (await state.get_data())['provincesId']
    cityId = callback_query.data[13:]

    await state.update_data(cityId=cityId)
    await StartStates.next()

    schools = await ns.get_school(link, countryId, provincesId, cityId)
    text = ''
    for i in schools:
        text += f"\n{i['id']} - {i['name']}"

    kb = InlineKeyboardMarkup().add(KeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data='start_back'))
    await message.edit_text('üìã–í–≤–µ–¥–∏—Ç–µ ID —à–∫–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ')

    if len(text) > 4096:
        for x in range(0, len(text), 4096):
            await bot.send_message(chat_id, text[x:x+4096])
        await bot.send_message(chat_id, '‚úÖ–í—Å—ë!', reply_markup=kb)
    else:
        await bot.send_message(chat_id, text, reply_markup=kb)

async def registration_inSchools(message: Message, state: FSMContext):
    bot = message.bot
    chat_id = message.chat.id
    if message.text.isdigit():
        await state.update_data(school=message.text) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —à–∫–æ–ª—É

        kb = InlineKeyboardMarkup().add(KeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data='start_back'))

        await bot.send_message(chat_id, 'üñä–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å (–ü—Ä–∏–º–µ—Ä: "8–±").', reply_markup=kb)
        await StartStates.next()
    else:
        await bot.send_message(chat_id, '‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑', reply_markup=kb)


async def registration_inClass(message: Message, state: FSMContext):
    bot = message.bot
    chat_id = message.chat.id
    if message.text:
        await state.update_data(clas=message.text.lower()) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª–∞—Å—Å

        kb = InlineKeyboardMarkup().add(KeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data='start_back'))

        await bot.send_message(chat_id, 'üñä–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –∏–∑ –°–ì–û (–ü—Ä–∏–º–µ—Ä: "nickname123456").', reply_markup=kb)
        await StartStates.next()
    else:
        await bot.send_message(chat_id, '‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑', reply_markup=kb)

async def registration_inLogin(message: Message, state: FSMContext):
    bot = message.bot
    chat_id = message.chat.id
    if message.text:
        await state.update_data(login=message.text) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ª–æ–≥–∏–Ω

        kb = InlineKeyboardMarkup().add(KeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data='start_back'))

        await bot.send_message(chat_id, 'üîë–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –∏–∑ –°–ì–û (–ü—Ä–∏–º–µ—Ä: "qwerty1234").', reply_markup=kb)
        await StartStates.next()
    else:
        await bot.send_message(chat_id, '‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑', reply_markup=kb)
    
async def registration_inPassword(message: Message, state: FSMContext):
    bot = message.bot
    chat_id = message.chat.id
    kb = InlineKeyboardMarkup().add(KeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data='start_back'))
    if message.text is None:
        return await bot.send_message(chat_id, '‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑', reply_markup=kb)

    all_data = await state.get_data()
    link = all_data['link']
    countryId = all_data['countryId']
    provincesId = all_data['provincesId']
    cityId = all_data['cityId']
    school = all_data['school']
    clas = all_data['clas']
    login = all_data['login']
    password = message.text

    for i in await ns.get_school(link, countryId, provincesId, cityId):
        if i['id'] == int(school):
            school = i['name']
            break
    
    try:
        studentId = await ns.getCurrentStudentId(login, password, school, link)
        logging.info(f'{chat_id}: Login in NetSchool')
    except:
        logging.exception(f'{chat_id}: Exception occurred')
        await bot.send_message(chat_id, '‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏–ª–∏ —à–∫–æ–ª–∞!\n ü§î–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=kb)
        await registration(message) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        return

    # –ï—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–¥:
    if get_chat_by_telegram_id(chat_id) is None:
        create_chat(telegram_id= chat_id)
        
    edit_chat_login(telegram_id=chat_id, new_login=login)
    edit_chat_password(telegram_id=chat_id, new_password=password)
    edit_chat_link(telegram_id=chat_id, new_link=link)
    edit_chat_school(telegram_id=chat_id, new_school=school)
    edit_chat_clas(telegram_id=chat_id, new_clas=clas)
    edit_chat_studentId(telegram_id=chat_id, new_studentId=studentId)
    logging.info(f'{chat_id}: User in database')

    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))

    await bot.send_message(chat_id, '‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!', reply_markup=keyboard)
    await state.finish()
    logging.info(f'{chat_id}: Start COMPLETED')



async def import_data_from_private(callback_query: CallbackQuery, state: FSMContext):
    message = callback_query.message
    await ConnectCodeStates.INCODE.set()
    await message.answer('üîí–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–∏—á–Ω—ã–µ –°–æ–æ–±—â–µ–Ω–∏—è "/code" –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —è –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª—é –≤ –æ—Ç–≤–µ—Ç.\n\nüîë–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è —Å–º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.')

async def import_data_from_private_with_code(message: Message, state: FSMContext):
    if message.text and len(message.text) == 6 and message.text.isdigit():
        chat_id = message.chat.id
        code = int(message.text)

        for student in get_all_students():
            if student.connect_code == code:
                if get_chat_by_telegram_id(chat_id) is None:
                    create_chat(telegram_id= chat_id)
                edit_chat_login(telegram_id=chat_id, new_login=student.login)
                edit_chat_password(telegram_id=chat_id, new_password=student.password)
                edit_chat_link(telegram_id=chat_id, new_link=student.link)
                edit_chat_school(telegram_id=chat_id, new_school=student.school)
                edit_chat_clas(telegram_id=chat_id, new_clas=student.clas)
                edit_chat_studentId(telegram_id=chat_id, new_studentId=student.studentId)
                logging.info(f'{chat_id}: Chat in database')

                keyboard = InlineKeyboardMarkup(resize_keyboard=True)
                keyboard.add(KeyboardButton('üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))

                await message.answer('‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!', reply_markup=keyboard)
                await state.finish()
                return
    await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')



async def start_back(message: Message , callback_query: CallbackQuery = None):
    bot = message.bot
    chat_id = message.chat.id
    if callback_query is not None:
        message = callback_query.message
    await bot.send_message(chat_id, 'üîô–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...')
    await registration(message)


def register_chat_start_handlers(dp: Dispatcher):
    dp.register_message_handler(start_back, content_types=['text'], text=['–Ω–∞–∑–∞–¥', '–ù–∞–∑–∞–¥', 'üîô–ù–∞–∑–∞–¥'], state='*', chat_type='group')

    dp.register_callback_query_handler(import_data_from_private, lambda c: c.data and c.data.startswith('import_data_from_private'), state='*', chat_type='group')
    dp.register_message_handler(import_data_from_private_with_code, state=ConnectCodeStates.INCODE, chat_type='group')

    dp.register_callback_query_handler(start_back, lambda c: c.data and c.data == 'start_back', state='*', chat_type='group')
    dp.register_message_handler(registration, content_types=['text'], text=['–Ω–∞—á–∞—Ç—å', '/–Ω–∞—á–∞—Ç—å', '/yfxfnm', '/start', '/—Å—Ç–∞—Ä—Ç'], chat_type='group')
    dp.register_message_handler(registration_inLink, state=StartStates.INLINK, chat_type='group')
    dp.register_callback_query_handler(registration_inCountries, lambda c: c.data and c.data.startswith('start_countries_'), state=StartStates.INCOUNTRIES, chat_type='group')
    dp.register_callback_query_handler(registration_inProvinces, lambda c: c.data and c.data.startswith('start_provinces_'), state=StartStates.INPROVINCES, chat_type='group')
    dp.register_callback_query_handler(registration_inCities, lambda c: c.data and c.data.startswith('start_cities_'), state=StartStates.INCITIES, chat_type='group')
    dp.register_message_handler(registration_inSchools, state=StartStates.INSCHOOL, chat_type='group')
    dp.register_message_handler(registration_inClass, state=StartStates.INCLASS, chat_type='group')
    dp.register_message_handler(registration_inLogin, state=StartStates.INLOGIN, chat_type='group')
    dp.register_message_handler(registration_inPassword, state=StartStates.INPASSWORD, chat_type='group')



