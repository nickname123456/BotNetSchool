import asyncio
from vkbottle.bot import Message, Blueprint
from PostgreSQLighter import db
from ns import get_school
from vkbottle import BaseStateGroup, CtxStorage, Keyboard, Text, KeyboardButtonColor
import logging
import ns
from VKRules import PayloadStarts

bp = Blueprint('registration')
bp.labeler.custom_rules["PayloadStarts"] = PayloadStarts



ctx = CtxStorage() # –æ–±—ä—è–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

class NewaccountState(BaseStateGroup):
    INLINK = 11
    INCOUNTRIES = 12
    INPROVINCES = 13
    INCITIES = 14
    INSCHOOL = 15
    INCLASS = 16
    INLOGIN = 17
    INPASSWORD = 18
   




@bp.on.message(lev='–ù–∞—á–∞—Ç—å')
@bp.on.message(payload={'cmd': 'start'})
async def registration(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!üëãüèª –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–≤–µ—Ç—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å https://vk.com/@botnetschool-spravka-po-ispolzovaniu-bota')
    await message.answer('–ü—Ä–æ–¥–æ–ª–∂–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (https://vk.com/@botnetschool-politika-v-otnoshenii-obrabotki-personalnyh-dannyh)')
    await message.answer('üîó–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ç–µ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (–ü—Ä–∏–º–µ—Ä: "https://sgo.edu-74.ru/").')
    await bp.state_dispenser.set(message.peer_id, NewaccountState.INLINK)


@bp.on.message(state=NewaccountState.INLINK)
async def registration_inLink(message: Message):
    if message.attachments:
        if message.attachments[0].link:
            link = 'https://' + str(message.attachments[0].link.caption) + '/'

    if message.text or link:
            if message.text:
                link = message.text

            ctx.set('link', link) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Å—ã–ª–∫—É
            
            try:
                countries = await ns.get_countries(link)
            except:
                await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑')
                return
            keyboard = Keyboard()
            for i in countries:
                keyboard.add(Text(i['name'], {'cmd': f'start_countries_{i["id"]}'}))
                keyboard.row()
            keyboard.add(Text('–ù–∞–∑–∞–¥', {'cmd': 'start'}), color = KeyboardButtonColor.NEGATIVE)

            await message.answer('üåç–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –∂–∏–≤–µ—Ç–µ?', keyboard=keyboard)
            await bp.state_dispenser.set(message.peer_id, NewaccountState.INCOUNTRIES)
    else:
        await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑')

@bp.on.message(state=NewaccountState.INCOUNTRIES, PayloadStarts='{"cmd":"start_countries_')
async def registration_inCountries(message: Message):
    countryId = int(message.payload[24:-2])

    ctx.set('countryId', countryId) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Å—ã–ª–∫—É
    await bp.state_dispenser.set(message.peer_id, NewaccountState.INPROVINCES)

    keyboard = (
        Keyboard()
        .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'start'}), color = KeyboardButtonColor.NEGATIVE)
    )

    provinces = await ns.get_provinces(ctx.get('link'), countryId)
    text = ''
    for i in provinces:
        text += f'\n"{i["id"]}" - {i["name"]}'

    await message.answer('üìã–í–≤–µ–¥–∏—Ç–µ ID —Ä–∞–π–æ–Ω–∞/–æ–±–ª–∞—Å—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ', keyboard=keyboard)

    if len(text) > 4096:
        for x in range(0, len(text), 4096):
            await message.answer(text[x:x+4096])
            await asyncio.sleep(1,5)
        await message.answer('‚úÖ–í—Å—ë!')
    else:
        await message.answer(text)

@bp.on.message(state=NewaccountState.INPROVINCES)
async def registration_inProvinces(message: Message):
    try:
        provincesId = int(message.text)
    except:
        await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
        return

    ctx.set('provincesId', provincesId) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Å—ã–ª–∫—É
    await bp.state_dispenser.set(message.peer_id, NewaccountState.INCITIES)

    keyboard = Keyboard().add(Text('–ù–∞–∑–∞–¥', {'cmd': 'start'}), color = KeyboardButtonColor.NEGATIVE)

    cities = await ns.get_cities(ctx.get('link'), ctx.get('countryId'), provincesId)
    text = ''
    for i in cities:
        text += f"\n{i['id']} - {i['name']}"

    await message.answer('üìã–í–≤–µ–¥–∏—Ç–µ ID –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ', keyboard=keyboard)

    if len(text) > 4096:
        for x in range(0, len(text), 4096):
            await message.answer(text[x:x+4096])
            await asyncio.sleep(1,5)
        await message.answer('‚úÖ–í—Å—ë!')
    else:
        await message.answer(text)

@bp.on.message(state=NewaccountState.INCITIES)
async def registration_inCities(message: Message):
    try:
        cityId = int(message.text)
    except:
        await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑')

    ctx.set('cityId', cityId) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Å—ã–ª–∫—É
    await bp.state_dispenser.set(message.peer_id, NewaccountState.INSCHOOL)

    keyboard = Keyboard().add(Text('–ù–∞–∑–∞–¥', {'cmd': 'start'}), color = KeyboardButtonColor.NEGATIVE)

    schools = await get_school(ctx.get('link'), ctx.get('countryId'), ctx.get('provincesId'), cityId)
    text = ''
    for i in schools:
        text += f"\n{i['id']} - {i['name']}"

    await message.answer('üìã–í–≤–µ–¥–∏—Ç–µ ID —à–∫–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ', keyboard=keyboard)

    if len(text) > 4096:
        for x in range(0, len(text), 4096):
            await message.answer(text[x:x+4096])
            await asyncio.sleep(1,5)
        await message.answer('‚úÖ–í—Å—ë!')
    else:
        await message.answer(text)
   



@bp.on.message(state=NewaccountState.INSCHOOL)
async def registration_inSchool(message: Message):
    if message.text.isdigit():
        ctx.set('school', message.text) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —à–∫–æ–ª—É

        await message.answer('üñä–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å (–ü—Ä–∏–º–µ—Ä: "8–±").')
        await bp.state_dispenser.set(message.peer_id, NewaccountState.INCLASS)
    else:
        await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑')


@bp.on.message(state=NewaccountState.INCLASS)
async def registration_inClass(message: Message):
    if message.text:
        ctx.set('clas', message.text.lower()) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª–∞—Å—Å

        await message.answer('üñä–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –∏–∑ –°–ì–û (–ü—Ä–∏–º–µ—Ä: "nickname123456").')
        await bp.state_dispenser.set(message.peer_id, NewaccountState.INLOGIN)
    else:
        await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑')


@bp.on.message(state=NewaccountState.INLOGIN)
async def registration_inLogin(message: Message):
    if message.text:
        ctx.set('login', message.text) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ª–æ–≥–∏–Ω

        await message.answer('üîë–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –∏–∑ –°–ì–û (–ü—Ä–∏–º–µ—Ä: "qwerty1234").')
        await bp.state_dispenser.set(message.peer_id, NewaccountState.INPASSWORD)
    else:
        await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑')



@bp.on.private_message(state=NewaccountState.INPASSWORD)
async def private_registration_inPassword(message: Message):
    userInfo = await bp.api.users.get(message.from_id) # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ

    link = ctx.get('link')
    countryId = ctx.get('countryId')
    provincesId = ctx.get('provincesId')
    cityId = ctx.get('cityId')
    school = ctx.get('school')
    clas = ctx.get('clas')
    login_without_spaces = ctx.get('login')
    password = message.text

    for i in await get_school(link, countryId, provincesId, cityId):
        if i['id'] == int(school):
            school = i['name']
            break
    
    login = ""
    for i in str(login_without_spaces):
        if i == '~':
            login+=' '
        else:
            login+=i

    try:
        studentId = await ns.getCurrentStudentId(login, password, school, link)
        logging.info(f'{message.peer_id}: Login in NetSchool')
    except:
        logging.exception(f'{message.peer_id}: Exception occurred')
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏–ª–∏ —à–∫–æ–ª–∞!\n ü§î–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await registration(message) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        return

    try:
        # –ï—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–¥:
        if db.get_account_isFirstLogin(userInfo[0].id) is None:
            db.add_user(userInfo[0].id, login, password, link, school, clas, studentId)
            db.commit()
        logging.info(f'{message.peer_id}: User in database')
    except TypeError:
        logging.exception(f'{message.peer_id}: User not in database')
        db.add_user(userInfo[0].id, login, password, link, school, clas, studentId)
        db.commit()

    else:
        db.edit_account_link(userInfo[0].id, link) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: link')
        db.edit_account_school(userInfo[0].id, school) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: school')
        db.edit_account_login(userInfo[0].id, login) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: login')
        db.edit_account_password(userInfo[0].id, password) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: password')
        db.edit_account_class(userInfo[0].id, clas) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: clas')
        db.edit_account_studentId(userInfo[0].id, studentId) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: studentId')
        db.commit()

    db.edit_account_correctData(userInfo[0].id, 1) # –î–µ–ª–∞–µ–º –ø–æ–º–µ—Ç–∫—É –≤ –±–¥, —á—Ç–æ —É —é–∑–µ—Ä–∞ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã
    db.commit()
    logging.info(f'{message.peer_id}: We make a note in the database that the user login and password are correct')

    keyboard = (
        Keyboard()
        .add(Text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {'cmd': 'menu'}), KeyboardButtonColor.POSITIVE)
    )

    await bp.state_dispenser.delete(message.from_id)
    await message.answer(f'‚úÖ{userInfo[0].first_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥ –ª–æ–≥–∏–Ω–æ–º: {login}', keyboard=keyboard)
    logging.info(f'{message.peer_id}: Start COMPLETED')







@bp.on.chat_message(state=NewaccountState.INPASSWORD)
async def chat_registration_inPassword(message: Message):
    chat_id = message.chat_id

    link = ctx.get('link')
    countryId = ctx.get('countryId')
    provincesId = ctx.get('provincesId')
    cityId = ctx.get('cityId')
    school = ctx.get('school')
    clas = ctx.get('clas')
    login_without_spaces = ctx.get('login')
    password = message.text

    for i in await get_school(link, countryId, provincesId, cityId):
        if i['id'] == int(school):
            school = i['name']
            break

    login = ''
    for i in str(login_without_spaces):
        if i == '~':
            login+=' '
        else:
            login+=i
            
    try:
        studentId = await ns.getCurrentStudentId(login, password, school, link)
        logging.info(f'{message.peer_id}: Login in NetSchool')
    except:
        logging.exception(f'{message.peer_id}: Exception occurred')
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏–ª–∏ —à–∫–æ–ª–∞!\n ü§î–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await registration(message) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        return

    try:
        # –ï—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–¥:
        if db.get_chat_id(chat_id) is None:
            db.add_chat(chat_id, login, password, link, school, clas, studentId)
            db.commit()
        logging.info(f'{message.peer_id}: User in database')
    except TypeError:
        logging.exception(f'{message.peer_id}: User not in database')
        db.add_chat(chat_id, login, password, link, school, clas, studentId)
        db.commit()

    else:
        db.edit_chat_link(chat_id, link) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: link')
        db.edit_chat_school(chat_id, school) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: school')
        db.edit_chat_login(chat_id, login) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: login')
        db.edit_chat_password(chat_id, password) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: password')
        db.edit_chat_class(chat_id, clas) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: clas')
        db.edit_chat_studentId(chat_id, studentId) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–¥ –ø–æ–¥ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f'{message.peer_id}: Changed database: studentId')
        db.commit()

    keyboard = (
        Keyboard()
        .add(Text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {'cmd': 'menu'}), KeyboardButtonColor.POSITIVE)
    )

    await bp.state_dispenser.delete(message.peer_id)
    await message.answer(f'‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥ –ª–æ–≥–∏–Ω–æ–º: {login}', keyboard=keyboard)
    logging.info(f'{message.peer_id}: Start COMPLETED')