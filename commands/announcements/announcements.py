from vkbottle.bot import Message, Blueprint
from PostgreSQLighter import db
from netschoolapi import NetSchoolAPI
import re
import logging
from vkbottle import DocMessagesUploader


bp = Blueprint('announcements') # –û–±—ä—è–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
bp.on.vbml_ignore_case = True # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π



@bp.on.private_message(text=["–û–±—ä—è–≤–ª–µ–Ω–∏—è <amount>", "–û–±—ä—è–≤–ª–µ–Ω–∏—è"])
@bp.on.private_message(payload={'cmd': 'announcements'})
async def private_announcements(message: Message, amount=3):
    logging.info(f'{message.peer_id}: I get "announcements {amount}"')
    user_id = message.from_id # ID —é–∑–µ—Ä–∞

    studentId = db.get_account_studentId(user_id)
    try:
        # –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ —Å–≥–æ
        api = NetSchoolAPI(db.get_account_link(user_id))
        await api.login(
            db.get_account_login(user_id),
            db.get_account_password(user_id),
            db.get_account_school(user_id),
            studentId)
    except: # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        logging.exception(f'{message.peer_id}: Exception occurred')
        await message.answer('‚ùå–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! \nü§î–ù–∞–ø–∏—à–∏ "–ù–∞—á–∞—Ç—å"\n ‚ùå–ò–ª–∏ —É —Ç–µ–±—è –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å')
        await api.logout()
        return
    logging.info(f'{message.peer_id}: Login in NetSchool')

    # –ö–æ–ø–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ —Å–≥–æ
    announcements = await api.announcements()
    # –û–±—Ä–µ–∑–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    announcements = announcements[:int(amount)]

    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è:
    if announcements:
        # –ü—Ä–∏–≤–æ–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥
        announcement = ''
        for i in announcements:
            announcement = "–î–∞—Ç–∞: " + i['postDate'] +"\n"+ i['name'] + ":" + i['description']

            announcement = re.sub(r'\<[^>]*\>', '', announcement)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            await message.answer(announcement)
            logging.info(f'{message.peer_id}: Send announcement')

            # –ü–µ—Ä–µ–±–µ—Ä–∞–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for attachment in i['attachments']:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                file = await api.download_attachment_as_bytes(attachment)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                attach = await DocMessagesUploader(api=message.ctx_api).upload(file_source = file,title = attachment['name'] ,peer_id=message.peer_id)
                await message.answer(attachment=attach)
                logging.info(f'{message.peer_id}: Send attachment')

            # –î–µ–ª–∞–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
            await message.answer('&#12288;')

    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π:
    else:
        logging.info(f'{message.peer_id}: No announcements')
        await message.answer('‚ùå–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π!')

    await api.logout()
    logging.info(f'{message.peer_id}: Logout from NetSchool')



@bp.on.chat_message(text=["–û–±—ä—è–≤–ª–µ–Ω–∏—è <amount>", "–û–±—ä—è–≤–ª–µ–Ω–∏—è"])
@bp.on.chat_message(payload={'cmd': 'announcements'})
async def chat_announcements(message: Message, amount=3):
    logging.info(f'{message.peer_id}: I get "announcements {amount}"')
    # –ê–π–¥–∏ —á–∞—Ç–∞:
    chat_id = message.chat_id
    studentId = db.get_chat_studentId(chat_id)

    try:
        # –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ —Å–≥–æ
        api = NetSchoolAPI(db.get_chat_link(chat_id))
        await api.login(
            db.get_chat_login(chat_id),
            db.get_chat_password(chat_id),
            db.get_chat_school(chat_id),
            studentId)
    except: # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        logging.exception(f'{message.peer_id}: Exception occurred')
        await message.answer('‚ùå–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! \nü§î–ù–∞–ø–∏—à–∏ "–ù–∞—á–∞—Ç—å"\n ‚ùå–ò–ª–∏ —É —Ç–µ–±—è –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å')
        await api.logout()
        return
    logging.info(f'{message.peer_id}: Login in NetSchool')

    # –ö–æ–ø–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ —Å–≥–æ
    announcements = await api.announcements()
    # –û–±—Ä–µ–∑–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    announcements = announcements[:int(amount)]

    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è:
    if announcements:
        # –ü—Ä–∏–≤–æ–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥
        announcement = ''
        for i in announcements:
            announcement = "–î–∞—Ç–∞: " + i['postDate'] +"\n"+ i['name'] + ":" + i['description']

            announcement = re.sub(r'\<[^>]*\>', '', announcement)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            await message.answer(announcement)
            logging.info(f'{message.peer_id}: Send announcement')

            # –ü–µ—Ä–µ–±–µ—Ä–∞–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for attachment in i['attachments']:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                file = await api.download_attachment_as_bytes(attachment)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                attach = await DocMessagesUploader(api=message.ctx_api).upload(file_source = file,title = attachment['name'] ,peer_id=message.peer_id)
                await message.answer(attachment=attach)
                logging.info(f'{message.peer_id}: Send attachment')

            # –î–µ–ª–∞–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
            await message.answer('&#12288;')

    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π:
    else:
        logging.info(f'{message.peer_id}: No announcements')
        await message.answer('‚ùå–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π!')

    await api.logout()
    logging.info(f'{message.peer_id}: Logout from NetSchool')