from vkbottle.bot import Message, Blueprint
from PostgreSQLighter import db
from vkbottle import CtxStorage, BaseStateGroup
import logging
import asyncio
from vkbottle import Keyboard, KeyboardButtonColor, Text, EMPTY_KEYBOARD
from ns import get_school
import traceback
from commands.menu import private_menu



bp = Blueprint('schedule_download') # –û–±—ä—è–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
bp.on.vbml_ignore_case = True# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä


ctx = CtxStorage() # –æ–±—ä—è–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

#–ù—É–∂–Ω–æ, –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥–¥–µ —Å–µ–π—á–∞—Å —é–∑–µ—Ä
class ScheduleData(BaseStateGroup):
    PHOTO = 1
    SCHOOL = 2
    CLAS = 3
    SCHOOL2 = 4
    SCHOOL3 = 5
    FINISH = 6

@bp.on.chat_message(payload={'cmd': 'schedule_download'})
@bp.on.chat_message(text=['/–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '/–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø', '/–ª–æ–∞–¥—Ä–∞—Å–ø', '/loadshedule'])
async def start_schedule_download(message: Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª/—Å!")

@bp.on.message(payload={'cmd': 'schedule_download'})
@bp.on.private_message(text=['/–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '/–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø', '/–ª–æ–∞–¥—Ä–∞—Å–ø', '/loadshedule'])
async def start_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get /loadshedule')

    keyboard = (
        Keyboard()
        .add(Text('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'))
        .row()
        .add(Text('–í—Ç–æ—Ä–Ω–∏–∫'))
        .row()
        .add(Text('–°—Ä–µ–¥–∞'))
        .row()
        .add(Text('–ß–µ—Ç–≤–µ—Ä–≥'))
        .row()
        .add(Text('–ü—è—Ç–Ω–∏—Ü–∞'))
        .row()
        .add(Text('–°—É–±–±–æ—Ç–∞'))
        .row()
        .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'menu'}), color=KeyboardButtonColor.NEGATIVE)
    )

    await bp.state_dispenser.set(message.peer_id, ScheduleData.PHOTO) # –ì–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –≤—ã–±–æ—Ä —Ñ–æ—Ç–æ
    await message.answer("–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", keyboard=keyboard)


@bp.on.private_message(state=ScheduleData.PHOTO)
async def photo_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get day in schedule_download')
    ctx.set('day', message.text) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    await bp.state_dispenser.set(message.peer_id, ScheduleData.SCHOOL) # –ì–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –≤—ã–±–æ—Ä —à–∫–æ–ª—ã
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", keyboard=EMPTY_KEYBOARD)


@bp.on.private_message(state=ScheduleData.SCHOOL)
async def school_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get photo in schedule_download')
    photo = message.attachments[0].photo
    ctx.set('photo', f'photo{photo.owner_id}_{photo.id}_{photo.access_key}') # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–æ—Ç–æ
    await bp.state_dispenser.set(message.peer_id, ScheduleData.SCHOOL2) # –ì–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –≤—ã–±–æ—Ä —à–∫–æ–ª—ã
    
    keyboard = (
        Keyboard()
        .add(Text('–î–∞, –¥–ª—è –º–æ–µ–π', {'LoadShedule': 'itsmyschool'}), color=KeyboardButtonColor.SECONDARY)
        .row()
        .add(Text('–ù–µ—Ç, –¥–ª—è –¥—Ä—É–≥–æ–π', {'LoadShedule': 'itsnotmyschool'}), color=KeyboardButtonColor.SECONDARY)
    )

    await message.answer("–≠—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–≤–æ–µ–π —à–∫–æ–ª—ã?", keyboard=keyboard)

@bp.on.private_message(state=ScheduleData.SCHOOL2, payload={'LoadShedule': 'itsmyschool'})
async def itsmyschool_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get itsmyschool in schedule_download')
    await message.answer('–•–æ—Ä–æ—à–æ, —Ç–∞–∫ –∏ –∑–∞–ø–∏—à—É')
    await bp.state_dispenser.set(message.peer_id, ScheduleData.CLAS)
    await class_schedule_download(message)

@bp.on.private_message(state=ScheduleData.SCHOOL2, payload={'LoadShedule': 'itsnotmyschool'})
async def itsnotmyschool_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get itsnotmyschool in schedule_download')
    await message.answer('üñä–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ç–µ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (–ü—Ä–∏–º–µ—Ä: "https://sgo.edu-74.ru/").', keyboard=EMPTY_KEYBOARD)
    await bp.state_dispenser.set(message.peer_id, ScheduleData.SCHOOL3)


@bp.on.private_message(state=ScheduleData.SCHOOL3)
async def itsnotmyschool2_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get itsnotmyschool2 in schedule_download')
    if message.attachments:
        if message.attachments[0].link:
            link = 'https://' + str(message.attachments[0].link.caption) + '/'

    if message.text or link:
        try:
            if message.text:
                link = message.text

            ctx.set('link', link) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Å—ã–ª–∫—É

            schools = await get_school(link)
            await message.answer('üìã–í–≤–µ–¥–∏ ID —à–∫–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ(ID - –®–∫–æ–ª–∞)')
            await asyncio.sleep(2)
            text = ''
            for school in schools:
                text += f"\n{school['id']} - {school['name']}"
            if len(text) > 4096:
                for x in range(0, len(text), 4096):
                    await message.answer(text[x:x+4096])
                    await asyncio.sleep(1,5)
                await message.answer('‚úÖ–í—Å—ë!')
            else:
                await message.answer(text)
            await bp.state_dispenser.set(message.peer_id, ScheduleData.CLAS)
        except Exception as e:
            print(traceback.print_exc())
            await message.answer(f'‚ùå–û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [kirillarz|—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É]')
    else:
        await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑')


    
@bp.on.private_message(state=ScheduleData.CLAS)
async def class_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get itsmyschool in schedule_download')
    userId = message.from_id # ID —é–∑–µ—Ä–∞

    if message.payload is None:
        link = ctx.get('link')
        school = message.text

        for i in await get_school(link):
            if i['id'] == int(school):
                school = i['name']
                break

        ctx.set('school', school) 
        await bp.state_dispenser.set(message.peer_id, ScheduleData.FINISH) 

    else:
        ctx.set('school', db.get_account_school(userId))
        await bp.state_dispenser.set(message.peer_id, ScheduleData.FINISH)

    keyboard = (
        Keyboard()
        .add(Text('–≠—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —à–∫–æ–ª—ã', {'LoadShedule': 'ItsSheduleForAllSchool'}), color=KeyboardButtonColor.SECONDARY)
    )

    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–ª–∞—Å—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∂–∞–µ—à—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", keyboard=keyboard)


@bp.on.private_message(state=ScheduleData.FINISH)
async def finish_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get finish in schedule_download')

    day = ctx.get('day')
    photo = ctx.get('photo')
    school = ctx.get('school')

    if message.text == '–≠—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —à–∫–æ–ª—ã':
        for i in set(db.get_account_any_with_filter('class', 'school', school)):
            clas = i[0]
            try:
                old_shedule = db.get_schedule(school, clas, day)
                db.edit_schedule(school, clas, day, photo)
            except:
                db.add_schedule(school, clas, day, photo)
        clas = 'all'

    else: 
        clas = message.text.lower()

        try:
            old_shedule = db.get_schedule(school, clas, day)
            db.edit_schedule(school, clas, day, photo)
        except:
            db.add_schedule(school, clas, day, photo)

    users_with_notification = db.get_accounts_schedule_notification()
    chats_with_notification = db.get_chats_schedule_notification()
    for i in users_with_notification:
        i_id = i[0]
        if db.get_account_school(i_id) == school:
            if db.get_account_class(i_id) == clas or clas == 'all':
                await bp.api.messages.send(message='–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!', user_id=i_id, random_id=0, attachment=photo)
                await asyncio.sleep(1)

    for i in chats_with_notification:
        i_id = i[0]
        if db.get_chat_school(i_id) == school:
            if db.get_chat_class(i_id) == clas or clas == 'all':
                await bp.api.messages.send(message='–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!', peer_id=2000000000+i_id, random_id=0, attachment=photo)
                await asyncio.sleep(1)

    await message.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', attachment=photo)
    await bp.state_dispenser.delete(message.from_id)
    logging.info(f'{message.peer_id}: I sent success')

    await private_menu(message)