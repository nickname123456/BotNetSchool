from vkbottle.bot import Message, Blueprint
from PostgreSQLighter import db
from vkbottle import CtxStorage, BaseStateGroup
import logging
import asyncio
from vkbottle import Keyboard, KeyboardButtonColor, Text, EMPTY_KEYBOARD
from commands.schedule.keyboard_schedule import keyboard_schedule
from settings import weekDays



bp = Blueprint('schedule_download') # –û–±—ä—è–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
bp.on.vbml_ignore_case = True# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä


ctx = CtxStorage() # –æ–±—ä—è–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

#–ù—É–∂–Ω–æ, –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥–¥–µ —Å–µ–π—á–∞—Å —é–∑–µ—Ä
class ScheduleData(BaseStateGroup):
    PHOTO = 1
    CLAS = 2
    FINISH = 3

@bp.on.chat_message(payload={'cmd': 'schedule_download'})
@bp.on.chat_message(text=['/–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '/–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø', '/–ª–æ–∞–¥—Ä–∞—Å–ø', '/loadshedule'])
async def start_schedule_download(message: Message):
    await message.answer("‚ùå–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª/—Å!")

@bp.on.message(payload={'cmd': 'schedule_download'})
@bp.on.private_message(text=['/–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '/–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø', '/–ª–æ–∞–¥—Ä–∞—Å–ø', '/loadshedule'])
async def start_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get /loadshedule')

    keyboard = (
        Keyboard()
        .add(Text('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'))
        .row()
        .add(Text('–í—Ç–æ—Ä–Ω–∏–∫'))
        .row()
        .add(Text('–°—Ä–µ–¥–∞'))
        .row()
        .add(Text('–ß–µ—Ç–≤–µ—Ä–≥'))
        .row()
        .add(Text('–ü—è—Ç–Ω–∏—Ü–∞'))
        .row()
        .add(Text('–°—É–±–±–æ—Ç–∞'))
        .row()
        .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'menu'}), color=KeyboardButtonColor.NEGATIVE)
    )

    await bp.state_dispenser.set(message.peer_id, ScheduleData.PHOTO) # –ì–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –≤—ã–±–æ—Ä —Ñ–æ—Ç–æ
    await message.answer("‚ùì–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", keyboard=keyboard)


@bp.on.private_message(state=ScheduleData.PHOTO)
async def photo_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get day in schedule_download')
    if message.text in weekDays.values():
        ctx.set('day', message.text) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    else:
        await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
    await bp.state_dispenser.set(message.peer_id, ScheduleData.CLAS) # –ì–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
    await message.answer("üìÖ–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", keyboard=EMPTY_KEYBOARD)


@bp.on.private_message(state=ScheduleData.CLAS)
async def class_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get itsmyschool in schedule_download')

    if message.attachments and message.attachments[0].photo:
        photo = message.attachments[0].photo
    else:
        await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
    ctx.set('photo', f'photo{photo.owner_id}_{photo.id}_{photo.access_key}') # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–æ—Ç–æ
    await bp.state_dispenser.set(message.peer_id, ScheduleData.FINISH)

    keyboard = (
        Keyboard()
        .add(Text('–≠—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —à–∫–æ–ª—ã', {'LoadShedule': 'ItsSheduleForAllSchool'}), color=KeyboardButtonColor.SECONDARY)
    )

    await message.answer("‚ùì–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–ª–∞—Å—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∂–∞–µ—à—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", keyboard=keyboard)


@bp.on.private_message(state=ScheduleData.FINISH)
async def finish_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get finish in schedule_download')
    userId = message.from_id # ID —é–∑–µ—Ä–∞

    day = ctx.get('day')
    photo = ctx.get('photo')
    school = db.get_account_school(userId)
    if message.text == '–≠—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —à–∫–æ–ª—ã':
        for i in set(db.get_account_any_with_filter('class', 'school', school)):
            clas = i[0]
            try:
                old_shedule = db.get_schedule(school, clas, day)
                db.edit_schedule(school, clas, day, photo)
            except:
                db.add_schedule(school, clas, day, photo)
        clas = 'all'

    else: 
        clas = message.text.lower()

        try:
            old_shedule = db.get_schedule(school, clas, day)
            db.edit_schedule(school, clas, day, photo)
        except:
            db.add_schedule(school, clas, day, photo)

    await message.answer('‚úÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', attachment=photo)
    await bp.state_dispenser.delete(message.from_id)

    await keyboard_schedule(message)

    users_with_notification = db.get_accounts_schedule_notification()
    chats_with_notification = db.get_chats_schedule_notification()
    for i in users_with_notification:
        i_id = i[0]
        if db.get_account_school(i_id) == school:
            if db.get_account_class(i_id) == clas or clas == 'all':
                await bp.api.messages.send(message='üîÑ–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!', user_id=i_id, random_id=0, attachment=photo)
                await asyncio.sleep(1)

    for i in chats_with_notification:
        i_id = i[0]
        if db.get_chat_school(i_id) == school:
            if db.get_chat_class(i_id) == clas or clas == 'all':
                await bp.api.messages.send(message='üîÑ–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!', peer_id=2000000000+i_id, random_id=0, attachment=photo)
                await asyncio.sleep(1)
    logging.info(f'{message.peer_id}: I sent success')