from vkbottle.bot import Message, Blueprint
from vkbottle import Keyboard, KeyboardButtonColor, Text
import logging
from PostgreSQLighter import db
from ns import get_diary, get_week
import netschoolapi
from settings import lessons_and_their_reduction


bp = Blueprint('homework_for_day')# –û–±—ä—è–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É




@bp.on.message(payload={'cmd': 'keyboard_homework_for_day'})
async def keyboard_homework_for_day(message: Message):
    logging.info(f'{message.peer_id}: I get keyboard_homework_for_day')
    keyboard = (
        Keyboard()
        .add(Text('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', {"cmd": "homework_for_day"}))
        .row()
        .add(Text('–í—Ç–æ—Ä–Ω–∏–∫', {'cmd': 'homework_for_day'}))
        .row()
        .add(Text('–°—Ä–µ–¥–∞', {'cmd': 'homework_for_day'}))
        .row()
        .add(Text('–ß–µ—Ç–≤–µ—Ä–≥', {'cmd': 'homework_for_day'}))
        .row()
        .add(Text('–ü—è—Ç–Ω–∏—Ü–∞', {'cmd': 'homework_for_day'}))
        .row()
        .add(Text("–ù–∞–∑–∞–¥", {'cmd': 'keyboard_homework'}), color=KeyboardButtonColor.NEGATIVE)
    )

    await message.answer('ü§î–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ?', keyboard=keyboard)
    logging.info(f'{message.peer_id}: I send keyboard_homework_for_day')





@bp.on.private_message(payload={'cmd': 'homework_for_day'})
async def private_homework_for_day(message: Message):
    logging.info(f'{message.peer_id}: I get homework_for_day')
    userId = message.from_id # ID —é–∑–µ—Ä–∞
    
    #–ï—Å–ª–∏ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–π
    if db.get_account_correctData(userId) != 1:
        await message.answer('‚ùå–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! \n–ù–∞–ø–∏—à–∏—Ç–µ "–ù–∞—á–∞—Ç—å"\n ‚ùå–ò–ª–∏ —É –≤–∞—Å –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å')
        logging.info(f'{message.peer_id}: User not found in db')
        return

    try:
        diary = await get_diary( # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫
            db.get_account_login(userId),
            db.get_account_password(userId),
            get_week(),
            db.get_account_school(userId),
            db.get_account_link(userId),
            db.get_account_studentId(userId)
        )
        logging.info(f'{message.peer_id}: Get diary in NetSchool')
    except netschoolapi.errors.AuthError:
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!')
        logging.info(f'{message.peer_id}: Incorrect login or password!')
        return
    
    if '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' in message.text:
        day = 0
    elif '–í—Ç–æ—Ä–Ω–∏–∫' in message.text:
        day = 1
    elif '–°—Ä–µ–¥–∞' in message.text:
        day = 2
    elif '–ß–µ—Ç–≤–µ—Ä–≥' in message.text:
        day = 3
    elif '–ü—è—Ç–Ω–∏—Ü–∞' in message.text:
        day = 4

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —É—Ä–æ–∫–∏
    for lesson in diary['weekDays'][day]['lessons']:
        lesson = lesson['subjectName']
        if lesson == '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å':
            continue
        lesson = lessons_and_their_reduction[lesson]
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∑
            homework = db.get_homework(
                db.get_account_school(userId),
                db.get_account_class(userId),
                lesson
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∑
            upd_date = db.get_upd_date(
                db.get_account_school(userId),
                db.get_account_class(userId),
                lesson
            )
        except TypeError:
            logging.exception(f'{message.peer_id}: Exception occurred')
            await message.answer('‚ùå–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! \n–ù–∞–ø–∏—à–∏—Ç–µ "–ù–∞—á–∞—Ç—å"\n ‚ùå–ò–ª–∏ —É –≤–∞—Å –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å')
            return

        await message.answer(f'üìö–£—Ä–æ–∫: {lesson} \nüÜô–ë—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {upd_date} \nüí¨–ó–∞–¥–∞–Ω–∏–µ: {homework}')
        logging.info(f'{message.peer_id}: Send homework')

    logging.info(f'{message.peer_id}: I send homework_for_day')





@bp.on.chat_message(payload={'cmd': 'homework_for_day'})
async def chat_homework_for_day(message: Message):
    logging.info(f'{message.peer_id}: I get homework_for_day')
    chat_id = message.chat_id

    try:
        diary = await get_diary( # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫
            db.get_chat_login(chat_id),
            db.get_chat_password(chat_id),
            get_week(),
            db.get_chat_school(chat_id),
            db.get_chat_link(chat_id),
            db.get_chat_studentId(chat_id)
        )
        logging.info(f'{message.peer_id}: Get diary in NetSchool')
    except netschoolapi.errors.AuthError:
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!')
        logging.info(f'{message.peer_id}: Incorrect login or password!')
        return
    
    if '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' in message.text:
        day = 0
    elif '–í—Ç–æ—Ä–Ω–∏–∫' in message.text:
        day = 1
    elif '–°—Ä–µ–¥–∞' in message.text:
        day = 2
    elif '–ß–µ—Ç–≤–µ—Ä–≥' in message.text:
        day = 3
    elif '–ü—è—Ç–Ω–∏—Ü–∞' in message.text:
        day = 4

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —É—Ä–æ–∫–∏
    for lesson in diary['weekDays'][day]['lessons']:
        lesson = lesson['subjectName']
        lesson = lessons_and_their_reduction[lesson]
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∑
            homework = db.get_homework(
                db.get_chat_school(chat_id),
                db.get_chat_class(chat_id),
                lesson
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∑
            upd_date = db.get_upd_date(
                db.get_chat_school(chat_id),
                db.get_chat_class(chat_id),
                lesson
            )
        except TypeError:
            logging.exception(f'{message.peer_id}: Exception occurred')
            await message.answer('‚ùå–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! \n–ù–∞–ø–∏—à–∏—Ç–µ "–ù–∞—á–∞—Ç—å"\n ‚ùå–ò–ª–∏ —É –≤–∞—Å –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å')
            return

        await message.answer(f'üìö–£—Ä–æ–∫: {lesson} \nüÜô–ë—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {upd_date} \nüí¨–ó–∞–¥–∞–Ω–∏–µ: {homework}')
        logging.info(f'{message.peer_id}: Send homework')

    logging.info(f'{message.peer_id}: I send homework_for_day')