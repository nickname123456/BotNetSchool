from vkbottle import Keyboard, KeyboardButtonColor, Text, CtxStorage, BaseStateGroup
from vkbottle.bot import Message, Blueprint
from PostgreSQLighter import db
from datetime import datetime
import logging
import asyncio
from commands.homework.keyboard_homework import private_keyboard_homework


bp = Blueprint('update_homework') # –û–±—ä—è–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
bp.on.vbml_ignore_case = True # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä


ctx = CtxStorage() # –æ–±—ä—è–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

#–ù—É–∂–Ω–æ, –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥–¥–µ —Å–µ–π—á–∞—Å —é–∑–µ—Ä
class HomeworkData(BaseStateGroup):
    lesson = 20
    homework = 21


@bp.on.private_message(payload={'cmd': 'keyboard_update_homework'})
async def private_keyboard_update_homework(message: Message):
    logging.info(f'{message.peer_id}: I get keyboard_update_homework')
    userId = message.from_id # ID —é–∑–µ—Ä–∞

    await bp.state_dispenser.set(message.peer_id, HomeworkData.lesson) # –ì–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –≤—ã–±–æ—Ä —É—Ä–æ–∫–∞

    keyboard = Keyboard()

    lessons = db.get_lessons_with_homework( # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏
        db.get_account_school(userId),
        db.get_account_class(userId)
    )
    counter = 1
    for i in lessons: # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —É—Ä–æ–∫–∏
        if counter == 4: # –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ —É–∂–µ 4 —É—Ä–æ–∫–∞, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥ —Å—Ç—Ä–æ–∫—É
            keyboard.row()
            counter = 1
        keyboard.add(Text(i[0], {"cmd": "update_homework"}))
        counter += 1
    
    keyboard.row()
    keyboard.add(Text("–ù–∞–∑–∞–¥", {'cmd': 'keyboard_homework'}), color=KeyboardButtonColor.NEGATIVE)

    await message.answer('ü§î–ù–∞ –∫–∞–∫–æ–π —É—Ä–æ–∫ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∑? –ï—Å–ª–∏ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.', keyboard=keyboard)
    logging.info(f'{message.peer_id}: I send list of lessons')


@bp.on.chat_message(payload={'cmd': 'keyboard_update_homework'})
async def chat_keyboard_update_homework(message: Message):
    await message.answer('‚ùå–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª/—Å!')




@bp.on.private_message(state=HomeworkData.lesson)
async def get_new_homework(message: Message):
    logging.info(f'{message.peer_id}: I get lesson in update_homework')
    if len(message.text) <= 40:
        ctx.set('lesson', message.text) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É—Ä–æ–∫
    else:
        return '‚ùå–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 40 —Å–∏–º–≤–æ–ª–æ–≤! \nü§î–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑'

    await bp.state_dispenser.set(message.peer_id, HomeworkData.homework)
    
    logging.info(f'{message.peer_id}: I sent a question about homework')
    return 'üí¨–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ'




@bp.on.private_message(state=HomeworkData.homework)
async def private_edit_hamework(message: Message):
    logging.info(f'{message.peer_id}: Im at the end of update_homework')
    userId = message.from_id # ID —é–∑–µ—Ä–∞

    await bp.state_dispenser.delete(message.peer_id) # –£–¥–∞–ª—è–µ–º —Ü–µ–ø–æ—á–∫—É

    lesson = ctx.get('lesson') # –ë–µ—Ä–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —É—Ä–æ–∫
    homework = message.text # –ë–µ—Ä–µ–º –¥–∑
    upd_date = f'{datetime.now().day}-{datetime.now().month}-{datetime.now().year} {datetime.now().hour}:{datetime.now().minute}'
    lessons = db.get_lessons_with_homework(
        db.get_account_school(userId),
        db.get_account_class(userId)
    )
    
    try:
        school = db.get_account_school(userId)
        clas = db.get_account_class(userId)

        if (lesson,) in lessons:
            db.edit_homework(
                school,
                clas,
                lesson,
                homework
            )
            db.edit_upd_date(
                school,
                clas,
                lesson,
                upd_date)
        else:
            db.add_lesson_with_homework(lesson, school, clas, homework, upd_date)
        db.commit()

        await message.answer('‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ –¥–∑')
        await private_keyboard_homework(message)
        logging.info(f'{message.peer_id}: I sent a success')

    except TypeError:
        await message.answer(f'‚ùå–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! \nü§î–ù–∞–ø–∏—à–∏ "–ù–∞—á–∞—Ç—å"')
        return

    except Exception as e:
        logging.exception(f'{message.peer_id}: Exception occurred')
        await message.answer(f'‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùå\n{e} \n‚ùå–°–æ–æ–±—â–∏ –∞–¥–º–∏–Ω—É‚ùå')
        return
    
    users_with_notification = db.get_accounts_homework_notification()
    chats_with_notification = db.get_chats_homework_notification()
    for i in users_with_notification:
        i_id = i[0]
        if db.get_account_school(i_id) == school:
            if db.get_account_class(i_id) == clas:
                await bp.api.messages.send(message=f'üîÑ–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ {lesson}!\nüÜô–ë—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {upd_date}\nüí¨–ó–∞–¥–∞–Ω–∏–µ: {homework}', user_id=i_id, random_id=0)
                await asyncio.sleep(1)

    for i in chats_with_notification:
        i_id = i[0]
        if db.get_chat_school(i_id) == school:
            if db.get_chat_class(i_id) == clas:
                await bp.api.messages.send(message=f'üîÑ–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ {lesson}!\nüÜô–ë—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {upd_date}\nüí¨–ó–∞–¥–∞–Ω–∏–µ: {homework}', peer_id=2000000000+i_id, random_id=0)
                await asyncio.sleep(1)

    logging.info(f'{message.peer_id}: update_homework is done')