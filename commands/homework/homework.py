from vkbottle.bot import Message, Blueprint
from PostgreSQLighter import db
import logging
from VKRules import PayloadStarts
import ns


bp = Blueprint('homework') # –û–±—ä—è–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
bp.labeler.custom_rules["PayloadStarts"] = PayloadStarts




@bp.on.private_message(PayloadStarts='{"cmd":"homework_')
async def private_homework(message: Message):
    logging.info(f'{message.peer_id}: I get homework')
    userId = message.from_id # ID —é–∑–µ—Ä–∞

    lessons = await ns.getSubjectsId(
        db.get_account_login(userId),
        db.get_account_password(userId),
        db.get_account_school(userId),
        db.get_account_link(userId),
        db.get_account_studentId(userId)
    )

    lessonId = message.payload[17:-2]
    lesson = [lesson for lesson in lessons if lessons[lesson] == lessonId][0]
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∑
        homework = db.get_homework(
            db.get_account_school(userId),
            db.get_account_class(userId),
            lesson
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∑
        upd_date = db.get_upd_date(
            db.get_account_school(userId),
            db.get_account_class(userId),
            lesson
        )
    except TypeError:
        logging.exception(f'{message.peer_id}: Exception occurred')
        await message.answer('‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫ –µ—â–µ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è. \n‚ò∫–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ –µ–≥–æ –∑–∞–ø–∏—Å–∞—Ç—å. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å"')
        return

    await message.answer(f'üìö–£—Ä–æ–∫: {lesson} \nüÜô–ë—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {upd_date} \nüí¨–ó–∞–¥–∞–Ω–∏–µ: {homework}')
    logging.info(f'{message.peer_id}: Send homework')



@bp.on.chat_message(PayloadStarts='{"cmd":"homework_')
async def chat_homework(message: Message):
    logging.info(f'{message.peer_id}: I get homework')
    chat_id = message.chat_id

    lessons = await ns.getSubjectsId(
        db.get_chat_login(chat_id),
        db.get_chat_password(chat_id),
        db.get_chat_school(chat_id),
        db.get_chat_link(chat_id),
        db.get_chat_studentId(chat_id)
    )

    lessonId = message.payload[17:-2]
    lesson = [lesson for lesson in lessons if lessons[lesson] == lessonId][0]
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∑
        homework = db.get_homework(
            db.get_chat_school(chat_id),
            db.get_chat_class(chat_id),
            lesson
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∑
        upd_date = db.get_upd_date(
            db.get_chat_school(chat_id),
            db.get_chat_class(chat_id),
            lesson
        )
    except TypeError:
        logging.exception(f'{message.peer_id}: Exception occurred')
        await message.answer('‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫ –µ—â–µ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è. \n‚ò∫–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ –µ–≥–æ –∑–∞–ø–∏—Å–∞—Ç—å. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å"')
        return
    except Exception as e:
        logging.exception(f'{message.peer_id}: Exception occurred')
        await message.answer(f'‚ùå–û—à–∏–±–∫–∞: {e} \n–°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!‚ùå')
        return

    await message.answer(f'üìö–£—Ä–æ–∫: {lesson} \nüÜô–ë—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {upd_date} \nüí¨–ó–∞–¥–∞–Ω–∏–µ: {homework}')
    logging.info(f'{message.peer_id}: Send homework')