from database.methods.update import edit_student_login, edit_student_password, edit_student_studentId, edit_chat_login, edit_chat_password, edit_chat_studentId
from database.methods.get import get_chat_by_vk_id, get_student_by_vk_id
import ns

from vkbottle.bot import Message, Blueprint

import logging


bp = Blueprint('login')# –û–±—ä—è–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
bp.on.vbml_ignore_case = True # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä




#–ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ "–í—Ö–æ–¥" –∏–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
@bp.on.private_message(text=["–í—Ö–æ–¥ <userLogin> <userPassword>", "–í—Ö–æ–¥", '–í–æ–π—Ç–∏', '–í–æ–π—Ç–∏ <userLogin> <userPassword>'])
@bp.on.private_message(payload={'cmd': 'login'})
async def private_login(message: Message, userLogin=None, userPassword=None):
    logging.info(f'{message.peer_id}: I get login')
    userInfo = await bp.api.users.get(message.from_id) # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ
    userId = message.from_id # ID —é–∑–µ—Ä–∞

    # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –≤ –±–¥
    if get_student_by_vk_id(userId) is None:
        logging.info(f'{message.peer_id}: User not in database')
        await message.answer("ü§î–¢–∞–∫... –°–º–æ—Ç—Ä—é –≤–∞—Å –µ—â–µ –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ù–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ —Å–µ–π—á–∞—Å –≤—Å–µ –±—É–¥–µ—Ç!")
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ "–ù–∞—á–∞—Ç—å"')
        return

    #–ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –∏ –ª–æ–≥–∏–Ω –≤–≤–µ–¥–µ–Ω—ã
    if userLogin != None and userPassword != None:
        student = get_student_by_vk_id(userId)
        try:
            studentId = await ns.getCurrentStudentId(
                userLogin,
                userPassword,
                student.school,
                student.link
            )
            logging.info(f'{message.peer_id}: Login in NetSchool')
        except:
            logging.exception(f'{message.peer_id}: Exception occurred')
            await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!‚ùå')
            return

        #–ó–∞–ø–∏—Å–∞—Ç—å –≤ –±–¥
        edit_student_login(vk_id=userId, new_login=userLogin)
        edit_student_password(vk_id=userId, new_password=userPassword)
        edit_student_studentId(vk_id=userId, new_studentId=studentId)
        logging.info(f'{message.peer_id}: Write new data to database')

    
    student = get_student_by_vk_id(userId)
    try:
        #–ê–≤—Ç–æ—Ä–µ–∑–∏—Ä—É–µ–º—Å—è –≤ –°–µ—Ç–µ–≤–æ–º –ì–æ—Ä–æ–¥–µ
        await ns.login(
            student.login, 
            student.password, 
            student.school,
            student.link,
            student.studentId
        )
        logging.info(f'{message.peer_id}: Login in NetSchool')
    except:
        logging.exception(f'{message.peer_id}: Exception occurred')
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!‚ùå')
        return

    await message.answer(f'‚úÖ{userInfo[0].first_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥ –ª–æ–≥–∏–Ω–æ–º: {student.login}')
    logging.info(f'{message.peer_id}: login COMPLETED')




@bp.on.chat_message(text=["–í—Ö–æ–¥ <userLogin> <userPassword>", "–í—Ö–æ–¥", '–í–æ–π—Ç–∏', '–í–æ–π—Ç–∏ <userLogin> <userPassword>'])
@bp.on.chat_message(payload={'cmd': 'login'})
async def chat_login(message: Message, userLogin=None, userPassword=None):
    logging.info(f'{message.peer_id}: I get login')
    chat_id = message.chat_id # –ß–∞—Ç –∞–π–¥–∏

    # –ï—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç –≤ –±–¥
    if get_chat_by_vk_id(chat_id) is None:
        logging.info(f'{message.peer_id}: Chat not in database')
        await message.answer("ü§î–¢–∞–∫... –°–º–æ—Ç—Ä—é –≤–∞—Å –µ—â–µ –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ù–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ —Å–µ–π—á–∞—Å –≤—Å–µ –±—É–¥–µ—Ç!")
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ "–ù–∞—á–∞—Ç—å"')
        return

    #–ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –∏ –ª–æ–≥–∏–Ω –≤–≤–µ–¥–µ–Ω—ã
    if userLogin != None and userPassword != None:
        chat = get_chat_by_vk_id(chat_id)
        try:
            studentId = await ns.getCurrentStudentId(
                userLogin,
                userPassword,
                chat.school,
                chat.link
            )
            logging.info(f'{message.peer_id}: Login in NetSchool')
        except:
            logging.exception(f'{message.peer_id}: Exception occurred')
            await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!‚ùå')
            return

        #–ó–∞–ø–∏—Å–∞—Ç—å –≤ –±–¥
        edit_chat_login(vk_id=chat_id, new_login=userLogin)
        edit_chat_password(vk_id=chat_id, new_password=userPassword)
        edit_chat_studentId(vk_id=chat_id, new_studentId=studentId)
        logging.info(f'{message.peer_id}: Write new data to database')

    chat = get_chat_by_vk_id(chat_id)
    try:
        #–ê–≤—Ç–æ—Ä–µ–∑–∏—Ä—É–µ–º—Å—è –≤ –°–µ—Ç–µ–≤–æ–º –ì–æ—Ä–æ–¥–µ
        await ns.login(
            chat.login, 
            chat.password, 
            chat.school,
            chat.link,
            chat.studentId
        )
        logging.info(f'{message.peer_id}: Login in NetSchool')
    except:
        logging.exception(f'{message.peer_id}: Exception occurred')
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!‚ùå')
        return
    
    await message.answer(f'‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥ –ª–æ–≥–∏–Ω–æ–º: {chat.login}')
    logging.info(f'{message.peer_id}: login COMPLETED')