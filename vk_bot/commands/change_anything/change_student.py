from database.methods.update import edit_chat_studentId, edit_student_studentId
from database.methods.get import get_chat_by_vk_id, get_student_by_vk_id
from vk_bot.commands.change_anything import change_anything_kb
import ns

from vkbottle import Keyboard, KeyboardButtonColor, Text
from vkbottle.bot import Message, Blueprint
from misc.VKRules import PayloadStarts

import logging


bp = Blueprint('change_student')# –û–±—ä—è–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
bp.on.vbml_ignore_case = True # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
bp.labeler.custom_rules["PayloadStarts"] = PayloadStarts





@bp.on.private_message(payload={'cmd': 'change_student'})
async def private_change_student(message: Message):
    logging.info(f'{message.peer_id}: I get change_student')
    user_id = message.from_id # ID —é–∑–µ—Ä–∞
    student = get_student_by_vk_id(user_id)

    students = await ns.getStudents( # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –∞–∫–∫–∞—É–Ω—Ç—É –°–ì–û
        student.login,
        student.password,
        student.school,
        student.link,
        student.studentId
    )
    currentStudentId = student.studentId # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
    
    keyboard = Keyboard()
    for i in students: # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –¥–µ—Ç–µ–π
        if i['studentId'] == currentStudentId: # –ï—Å–ª–∏ —ç—Ç–æ—Ç —Ä–µ–±–µ–Ω–æ–∫ - –≤—ã–±—Ä–∞–Ω–Ω—ã–π, —Ç–æ –≤—ã–¥–µ–ª—è–µ–º –∑–µ–ª–µ–Ω—ã–º
            keyboard.add(Text(i['nickName'], {'cmd': f'change_student_{i["studentId"]}'}), color=KeyboardButtonColor.POSITIVE)
            keyboard.row()
        else:
            keyboard.add(Text(i['nickName'], {'cmd': f'change_student_{i["studentId"]}'}), color=KeyboardButtonColor.SECONDARY)
            keyboard.row()
    keyboard.add(Text("–ù–∞–∑–∞–¥", {'cmd': 'change_anything_kb'}), color=KeyboardButtonColor.NEGATIVE)

    await message.answer('üëÜüèª–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞', keyboard=keyboard)
    logging.info(f'{message.peer_id}: I sent change_student')

@bp.on.chat_message(payload={'cmd': 'change_student'})
async def chat_change_student(message: Message):
    logging.info(f'{message.peer_id}: I get change_student')
    # –ê–π–¥–∏ —á–∞—Ç–∞:
    chat_id = message.chat_id
    chat = get_chat_by_vk_id(chat_id)

    students = await ns.getStudents( # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –∞–∫–∫–∞—É–Ω—Ç—É –°–ì–û
        chat.login,
        chat.password,
        chat.school,
        chat.link,
        chat.studentId
    )
    currentStudentId = chat.studentId # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
    
    keyboard = Keyboard()
    for i in students: # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –¥–µ—Ç–µ–π
        if i['studentId'] == currentStudentId:  # –ï—Å–ª–∏ —Ä–µ–±–µ–Ω–æ–∫ - –≤—ã–±—Ä–∞–Ω—ã–π, —Ç–æ –≤—ã–¥–µ–ª—è–µ–º –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            keyboard.add(Text(i['nickName'], {'cmd': f'change_student_{i["studentId"]}'}), color=KeyboardButtonColor.POSITIVE)
            keyboard.row()
        else:
            keyboard.add(Text(i['nickName'], {'cmd': f'change_student_{i["studentId"]}'}), color=KeyboardButtonColor.SECONDARY)
            keyboard.row()
    keyboard.add(Text("–ù–∞–∑–∞–¥", {'cmd': 'change_anything_kb'}), color=KeyboardButtonColor.NEGATIVE)

    await message.answer('üëÜüèª–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞', keyboard=keyboard)
    logging.info(f'{message.peer_id}: I sent change_student')


@bp.on.private_message(PayloadStarts='{"cmd":"change_student_')
async def private_exactly_change_student(message: Message):
    logging.info(f'{message.peer_id}: I get change_student with studentId')
    user_id = message.from_id # ID —é–∑–µ—Ä–∞

    studentId = message.payload[23:-2] # –ü–æ–ª—É—á–∞–µ–º ID —É—á–µ–Ω–∏–∫–∞, –Ω–∞ –∫–æ—Ç–æ–≥–æ —Å–º–µ–Ω–∏–ª–∏

    edit_student_studentId(vk_id=user_id, new_studentId=studentId) # –ú–µ–Ω—è–µ–º –≤ –±–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞

    await message.answer('‚úÖ–Ø —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞')
    logging.info(f'{message.peer_id}: I sent change_student with studentId')
    await change_anything_kb.change_anything_kb(message)

@bp.on.chat_message(PayloadStarts='{"cmd":"change_student_')
async def chat_exactly_change_student(message: Message):
    logging.info(f'{message.peer_id}: I get change_student with studentId')
    # –ê–π–¥–∏ —á–∞—Ç–∞:
    chat_id = message.chat_id

    studentId = message.payload[23:-2] # –ü–æ–ª—É—á–∞–µ–º ID —É—á–µ–Ω–∏–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–º–µ–Ω–∏–ª–∏

    edit_chat_studentId(vk_id=chat_id, new_studentId=studentId) # –ú–µ–Ω—è–µ–º –≤ –±–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞

    await message.answer('‚úÖ–Ø —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞')
    logging.info(f'{message.peer_id}: I sent change_student with studentId')
    await change_anything_kb.change_anything_kb(message)