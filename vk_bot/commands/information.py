from database.methods.get import get_chat_by_vk_id, get_student_by_vk_id
from ns import getSettings

from vkbottle.bot import Message, Blueprint

import logging


bp = Blueprint('information')# –û–±—ä—è–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
bp.on.vbml_ignore_case = True # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä


@bp.on.private_message(text=['/z', '/—è', '/–ø—Ä–æ—Ñ–∏–ª—å', '/ghjabkm', '/profile', '/i'])
@bp.on.private_message(payload={'cmd': 'information'})
async def private_information(message: Message):
    logging.info(f'{message.peer_id}: I get information')
    user_id = message.from_id # ID —é–∑–µ—Ä–∞

    student = get_student_by_vk_id(user_id)
    try:
        result= await getSettings( # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –°–ì–û
            student.login,
            student.password,
            student.school,
            student.link,
            student.studentId,
            student.clas
        )
    except:
        logging.exception(f'{message.peer_id}: Exception occurred')
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!\n ü§î–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞–ø–∏—Å–∞—Ç—å "–ù–∞—á–∞—Ç—å", –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        return

    await message.answer(result)
    logging.info(f'{message.peer_id}: I sent information')


@bp.on.chat_message(text=['/z', '/—è', '/–ø—Ä–æ—Ñ–∏–ª—å', '/ghjabkm', '/profile', '/i'])
@bp.on.chat_message(payload={'cmd': 'information'})
async def chat_information(message: Message):
    logging.info(f'{message.peer_id}: I get information')
    # –ê–π–¥–∏ —á–∞—Ç–∞:
    chat_id = message.chat_id

    chat = get_chat_by_vk_id(chat_id)
    try:
        result= await getSettings( # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –°–ì–û
            chat.login,
            chat.password,
            chat.school,
            chat.link,
            chat.studentId,
            chat.clas
        )
    except:
        logging.exception(f'{message.peer_id}: Exception occurred')
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!\n ü§î–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞–ø–∏—Å–∞—Ç—å "–ù–∞—á–∞—Ç—å", –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        return

    await message.answer(result)
    logging.info(f'{message.peer_id}: I sent information')