from database.methods.get import get_all_classes_by_school, get_chats_with_schedule_notification, get_schedule, get_student_by_vk_id, get_students_with_schedule_notification
from database.methods.update import edit_schedule_photo, edit_student_telegram_id, edit_student_vk_id
from database.methods.create import create_schedule
from database.methods.delete import delete_chat

from vk_bot.commands.schedule.keyboard_schedule import keyboard_schedule
from tg_bot.utils import send_telegram_msg, send_telegram_bytes_photo
from vk_bot.utils import download_photo_as_bytes
from settings import weekDays, tg_token

from vkbottle import CtxStorage, BaseStateGroup, PhotoMessageUploader, VKAPIError
from vkbottle import Keyboard, KeyboardButtonColor, Text, EMPTY_KEYBOARD
from vkbottle.bot import Message, Blueprint

import aiogram

import logging
import asyncio

tg_bot = aiogram.Bot(token=tg_token, parse_mode='HTML')

bp = Blueprint('schedule_download') # –û–±—ä—è–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
bp.on.vbml_ignore_case = True# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä


ctx = CtxStorage() # –æ–±—ä—è–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

#–ù—É–∂–Ω–æ, –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥–¥–µ —Å–µ–π—á–∞—Å —é–∑–µ—Ä
class ScheduleData(BaseStateGroup):
    PHOTO = 1
    CLAS = 2
    FINISH = 3

@bp.on.chat_message(payload={'cmd': 'schedule_download'})
@bp.on.chat_message(text=['/–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '/–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø', '/–ª–æ–∞–¥—Ä–∞—Å–ø', '/loadshedule'])
async def start_schedule_download(message: Message):
    logging.info(f'{message.from_id}: I get command shedule_download in chat')
    await message.answer("‚ùå–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª/—Å!")

@bp.on.message(payload={'cmd': 'schedule_download'})
@bp.on.private_message(text=['/–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '/–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø', '/–ª–æ–∞–¥—Ä–∞—Å–ø', '/loadshedule'])
async def start_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get command shedule_download in private')

    keyboard = (
        Keyboard()
        .add(Text('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'))
        .row()
        .add(Text('–í—Ç–æ—Ä–Ω–∏–∫'))
        .row()
        .add(Text('–°—Ä–µ–¥–∞'))
        .row()
        .add(Text('–ß–µ—Ç–≤–µ—Ä–≥'))
        .row()
        .add(Text('–ü—è—Ç–Ω–∏—Ü–∞'))
        .row()
        .add(Text('–°—É–±–±–æ—Ç–∞'))
        .row()
        .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'keyboard_schedule'}), color=KeyboardButtonColor.NEGATIVE)
    )

    await bp.state_dispenser.set(message.peer_id, ScheduleData.PHOTO) # –ì–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –≤—ã–±–æ—Ä —Ñ–æ—Ç–æ
    await message.answer("‚ùì–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", keyboard=keyboard)
    logging.info(f'{message.peer_id}: I send question about day')


@bp.on.private_message(state=ScheduleData.PHOTO)
async def photo_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get day in schedule_download')
    if message.text in weekDays.values(): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —é–∑–µ—Ä –≤–≤–µ–ª –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        ctx.set('day', message.text) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    elif message.text.lower() == '–Ω–∞–∑–∞–¥':
        await keyboard_schedule(message)
        return
    else:
        logging.info(f'{message.peer_id}: I get wrong day in schedule_download')
        await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
    await bp.state_dispenser.set(message.peer_id, ScheduleData.CLAS) # –ì–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
    keyboard = ( # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
        Keyboard()
        .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'keyboard_schedule'}), color=KeyboardButtonColor.NEGATIVE)
    )
    await message.answer("üìÖ–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", keyboard=keyboard)
    logging.info(f'{message.peer_id}: I send question about photo')


@bp.on.private_message(state=ScheduleData.CLAS)
async def class_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get photo in schedule_download')

    if message.attachments and message.attachments[0].photo: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
        photo = message.attachments[0].photo
    elif message.text.lower() == '–Ω–∞–∑–∞–¥':
        await keyboard_schedule(message)
        return
    else:
        logging.info(f'{message.peer_id}: I get wrong photo in schedule_download')
        await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
    ctx.set('photo', download_photo_as_bytes(photo)) # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–æ—Ç–æ
    await bp.state_dispenser.set(message.peer_id, ScheduleData.FINISH)

    keyboard = (
        Keyboard()
        .add(Text('–≠—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —à–∫–æ–ª—ã', {'LoadShedule': 'ItsSheduleForAllSchool'}), color=KeyboardButtonColor.SECONDARY)
    )

    await message.answer("‚ùì–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª–∞—Å—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", keyboard=keyboard)
    logging.info(f'{message.peer_id}: I send question about class')


@bp.on.private_message(state=ScheduleData.FINISH)
async def finish_schedule_download(message: Message):
    logging.info(f'{message.peer_id}: I get finish in schedule_download')
    userId = message.from_id # ID —é–∑–µ—Ä–∞
    student = get_student_by_vk_id(userId)

    day = ctx.get('day')
    photo_as_bytes = ctx.get('photo')
    photo = await PhotoMessageUploader(api=message.ctx_api).upload(photo_as_bytes) # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ –í–ö
    school = student.school
    if message.text == '–≠—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —à–∫–æ–ª—ã': # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —à–∫–æ–ª—ã
        for i in get_all_classes_by_school(student.school): # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã
            clas = i[0]
            if get_schedule(school, clas, day) is None: # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                create_schedule(school, clas, day, photo_as_bytes) # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                logging.info(f'{message.peer_id}: I create schedule for {clas}')
            else: # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                edit_schedule_photo(school, clas, day, photo_as_bytes) # –ó–∞–º–µ–Ω—è–µ–º —Ñ–æ—Ç–æ
                logging.info(f'{message.peer_id}: I edit schedule for {clas}')
        clas = 'all'

    else: # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        clas = message.text.lower() 

        if get_schedule(school, clas, day) is None: # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            create_schedule(school, clas, day, photo_as_bytes) # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            logging.info(f'{message.peer_id}: I create schedule for {clas}')
        else: # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            edit_schedule_photo(school, clas, day, photo_as_bytes) # –ó–∞–º–µ–Ω—è–µ–º —Ñ–æ—Ç–æ
            logging.info(f'{message.peer_id}: I edit schedule for {clas}')

    await message.answer('‚úÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', attachment=photo)
    await bp.state_dispenser.delete(message.from_id) # –£–¥–∞–ª—è–µ–º —Ü–µ–ø–æ—á–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    logging.info(f'{message.peer_id}: I send success message and delete state')

    await keyboard_schedule(message) # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —é–∑–µ—Ä–∞ –≤ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

    users_with_notification = get_students_with_schedule_notification() # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    chats_with_notification = get_chats_with_schedule_notification() # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for i in users_with_notification: # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤
        if i.school == school: # –ï—Å–ª–∏ —à–∫–æ–ª–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if i.clas == clas or clas == 'all': # –ï—Å–ª–∏ –∫–ª–∞—Å—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —à–∫–æ–ª—ã
                if i.vk_id: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –í–ö
                    try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await bp.api.messages.send(message=f'üîÑ–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}!', user_id=i.vk_id, random_id=0, attachment=photo)
                        logging.info(f'{i.vk_id}: I send schedule notification')
                    except VKAPIError: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                        logging.info(f'{i.vk_id}: I cant send schedule notification')
                        if i.vk_id and i.telegram_id: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –í–ö –∏ –¢–µ–ª–µ–≥—Ä–∞–º
                            edit_student_vk_id(telegram_id=i.telegram_id, new_vk_id=None) # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –í–ö
                            await send_telegram_msg(bot=tg_bot, chat_id=i.telegram_id, text='‚ùå–Ø –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –í–ö, —Ç.–∫. –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –º–µ–Ω—è. –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ')
                if i.telegram_id: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¢–µ–ª–µ–≥—Ä–∞–º
                    try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await send_telegram_bytes_photo(bot=tg_bot, chat_id=i.telegram_id, caption=f'üîÑ–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}!', photo=photo_as_bytes)
                        logging.info(f'{i.telegram_id}: I send schedule notification')
                    except aiogram.utils.exceptions.BotBlocked: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                        logging.info(f'{i.telegram_id}: I cant send schedule notification')
                        if i.vk_id and i.telegram_id: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –í–ö –∏ –¢–µ–ª–µ–≥—Ä–∞–º
                            edit_student_telegram_id(vk_id=i.vk_id, new_telegram_id=None) # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –¢–µ–ª–µ–≥—Ä–∞–º
                            await bp.api.messages.send(message='‚ùå–Ø –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ, —Ç.–∫. –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –º–µ–Ω—è. –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –í–ö', user_id=i.vk_id, random_id=0)
                await asyncio.sleep(1)

    for i in chats_with_notification: # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
        if i.school == school: # –ï—Å–ª–∏ —à–∫–æ–ª–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if i.clas == clas or clas == 'all': # –ï—Å–ª–∏ –∫–ª–∞—Å—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —à–∫–æ–ª—ã
                if i.vk_id: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –í–ö
                    try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await bp.api.messages.send(message=f'üîÑ–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}!', peer_id=2000000000+i.vk_id, random_id=0, attachment=photo)
                        logging.info(f'{2000000000+i.vk_id}: I send schedule notification')
                    except VKAPIError: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                        delete_chat(vk_id=i.vk_id) # –£–¥–∞–ª—è–µ–º —á–∞—Ç
                        logging.info(f'{2000000000+i.vk_id}: I cant send schedule notification and delete chat')
                if i.telegram_id: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¢–µ–ª–µ–≥—Ä–∞–º
                    try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await send_telegram_bytes_photo(bot=tg_bot, chat_id=i.telegram_id, caption=f'üîÑ–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}!', photo=photo_as_bytes)
                        logging.info(f'{i.telegram_id}: I send schedule notification')
                    except aiogram.utils.exceptions.BotKicked: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                        delete_chat(telegram_id=i.telegram_id) # –£–¥–∞–ª—è–µ–º —á–∞—Ç
                        logging.info(f'{i.telegram_id}: I cant send schedule notification and delete chat')
                await asyncio.sleep(1)
    logging.info(f'{message.peer_id}: I done mailing in schedule_download')